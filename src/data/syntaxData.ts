import { SyntaxData } from '@/types';

export const syntaxData: SyntaxData = {
    Python: `print("Hello, World!")\n\n# Variable\nmessage = "This is Python"`,
    JavaScript: `console.log("Hello, World!");\n\n// Variable\nlet message = "This is JavaScript";`,
    Java: `public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println("Hello, World!");\n        \n        // Variable\n        String message = "This is Java";\n    }\n}`,
    'C++': `#include <iostream>\n\nint main() {\n    std::cout << "Hello, World!" << std::endl;\n    \n    // Variable\n    std::string message = "This is C++";\n    return 0;\n}`,
    C: `#include <stdio.h>\n\nint main() {\n   printf("Hello, World!\\n");\n   \n   // Variable (string is char array)\n   char message[] = "This is C";\n   return 0;\n}`,
    Ruby: `puts "Hello, World!"\n\n# Variable\nmessage = "This is Ruby"`,
    Swift: `print("Hello, World!")\n\n// Variable\nvar message = "This is Swift"`,
    Go: `package main\n\nimport "fmt"\n\nfunc main() {\n    fmt.Println("Hello, World!")\n    \n    // Variable\n    var message string = "This is Go"\n    _ = message // Use variable to avoid error\n}`,
    Rust: `fn main() {\n    println!("Hello, World!");\n    \n    // Variable\n    let message = "This is Rust";\n}`,
    PHP: `<?php\necho "Hello, World!\\n";\n\n// Variable\n$message = "This is PHP";\n?>`,
    'C#': `using System;\n\npublic class HelloWorld\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine ("Hello, World!");\n        \n        // Variable\n        string message = "This is C#";\n    }\n}`,
    Kotlin: `fun main() {\n    println("Hello, World!")\n    \n    // Variable\n    val message = "This is Kotlin"\n}`,
    Scala: `object HelloWorld {\n    def main(args: Array[String]): Unit = {\n        println("Hello, World!")\n        \n        // Variable\n        val message = "This is Scala"\n    }\n}`,
    Haskell: `main :: IO ()\nmain = putStrLn "Hello, World!"\n\n-- Variable (Constants are common)\nmessage :: String\nmessage = "This is Haskell"`,
    Lisp: `(format t "Hello, World!~%")\n\n; Variable (using Common Lisp syntax)\n(defparameter *message* "This is Lisp")`,
    Assembly: `; Assembly varies greatly by architecture\n; Example NASM syntax for Linux x86-64 Hello World\n\nsection .data\n    msg db 'Hello, World!', 0xa ; String and newline\n    len equ $ - msg          ; Length of string\n\nsection .text\n    global _start\n\n_start:\n    ; write(1, msg, len)\n    mov rax, 1       ; system call number (sys_write)\n    mov rdi, 1       ; file descriptor 1 (stdout)\n    mov rsi, msg     ; address of string to write\n    mov rdx, len     ; number of bytes\n    syscall          ; invoke kernel\n\n    ; exit(0)\n    mov rax, 60      ; system call number (sys_exit)\n    xor rdi, rdi     ; exit code 0\n    syscall          ; invoke kernel`,
    'Algol 60': `begin\n    comment Hello World for Algol 60;\n    outstring(1, "Hello, World!");\n    newline(1);\n\n    comment Variable example;\n    string message;\n    message := "This is Algol 60";\n    outstring(1, message);\n    newline(1);\nend`,
    'Objective-C': `#import <Foundation/Foundation.h>\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        NSLog(@"Hello, World!");\n        \n        // Variable\n        NSString *message = @"This is Objective-C";\n        NSLog(@"%@", message);\n    }\n    return 0;\n}`,
    Perl: `use strict;\nuse warnings;\n\nprint "Hello, World!\\n";\n\n# Variable\nmy $message = "This is Perl";\nprint "$message\\n";`,
    Awk: `BEGIN {\n    print "Hello, World!"\n    \n    # Variable\n    message = "This is Awk"\n    print message\n}`,
    D: `import std.stdio;\n\nvoid main() {\n    writeln("Hello, World!");\n\n    // Variable\n    string message = "This is D";\n    writeln(message);\n}`,
    Zig: `const std = @import("std");\n\npub fn main() !void {\n    const stdout = std.io.getStdOut().writer();\n    try stdout.print("Hello, World!\\n", .{});\n\n    // Variable\n    const message = "This is Zig";\n    try stdout.print("{s}\\n", .{message});\n}`,
    Odin: `package main\n\nimport "core:fmt"\n\nmain :: proc() {\n    fmt.println("Hello, World!")\n\n    // Variable\n    message: string = "This is Odin"\n    fmt.println(message)\n}`,
    V: `fn main() {\n    println('Hello, World!')\n\n    // Variable\n    message := 'This is V'\n    println(message)\n}`,
    Dart: `void main() {\n  print('Hello, World!');\n\n  // Variable\n  var message = 'This is Dart';\n  print(message);\n}`,
    TypeScript: `console.log("Hello, World!");\n\n// Variable\nlet message: string = "This is TypeScript";\nconsole.log(message);`,
    ML: `(* Standard ML syntax for ML Family *)\nprint "Hello, World!\\n";\n\n(* Variable *)\nval message = "This is ML (via SML)";\nprint (message ^ "\\n");`,
    'Standard ML': `print "Hello, World!\\n";\n\n(* Variable *)\nval message = "This is Standard ML";\nprint (message ^ "\\n");`,
    OCaml: `let () = print_endline "Hello, World!"\n\n(* Variable *)\nlet message = "This is OCaml"\nlet () = print_endline message`,
    'F#': `printfn "Hello, World!"\n\n// Variable\nlet message = "This is F#"\nprintfn "%s" message`,
    Nim: `echo "Hello, World!"\n\n# Variable\nvar message: string = "This is Nim"\necho message`,
    Julia: `println("Hello, World!")\n\n# Variable\nmessage = "This is Julia"\nprintln(message)`,
    Pascal: `program HelloWorld;\nvar\n  message: string;\nbegin\n  WriteLn('Hello, World!');\n  message := 'This is Pascal';\n  WriteLn(message);\nend.`,
    'Modula-2': `MODULE HelloWorld;\nFROM InOut IMPORT WriteString, WriteLn;\nVAR\n  message: ARRAY [0..20] OF CHAR;\nBEGIN\n  WriteString("Hello, World!");\n  WriteLn;\n  message := "This is Modula-2";\n  WriteString(message);\n  WriteLn;\nEND HelloWorld.`,
    ABC: `WRITE "Hello, World!" /\n\n-- Variable\nPUT "This is ABC" IN message\nWRITE message /`,
    Ada: `with Ada.Text_IO; use Ada.Text_IO;\nprocedure Hello is\n   Message : String := "This is Ada";\nbegin\n   Put_Line ("Hello, World!");\n   Put_Line (Message);\nend Hello;`,
    Oberon: `MODULE HelloWorld;\nIMPORT Out;\nVAR\n  message: ARRAY 32 OF CHAR;\nBEGIN\n  Out.String("Hello, World!"); Out.Ln;\n  message := "This is Oberon";\n  Out.String(message); Out.Ln;\nEND HelloWorld.`,
    Scheme: `(display "Hello, World!")\n(newline)\n\n; Variable\n(define message "This is Scheme")\n(display message)\n(newline)`,
    'Common Lisp': `(format t "Hello, World!~%")\n\n; Variable\n(defvar *my-message* "This is Common Lisp")\n(format t "~a~%" *my-message*)`,
    Clojure: `(println "Hello, World!")\n\n; Variable\n(def message "This is Clojure")\n(println message)`,
    Racket: `#lang racket\n(displayln "Hello, World!")\n\n; Variable\n(define message "This is Racket")\n(displayln message)`,
    Lua: `print("Hello, World!")\n\n-- Variable\nlocal message = "This is Lua"\nprint(message)`,
    Simula: `Begin\n    OutText("Hello, World!");\n    OutImage;\n    ! Variable;\n    Text T;\n    T :- "This is Simula";\n    OutText(T);\n    OutImage;\nEnd;`,
    Smalltalk: `Transcript show: 'Hello, World!'; cr.\n\n"Variable"\n| message |\nmessage := 'This is Smalltalk'.\nTranscript show: message; cr.`,
    Elixir: `IO.puts "Hello, World!"\n\n# Variable\nmessage = "This is Elixir"\nIO.puts message`,
    Prolog: `:- initialization(main).\nmain :-\n  write('Hello, World!'), nl,\n  Message = 'This is Prolog', % Variable-like usage\n  write(Message), nl.`,
    Erlang: `-module(hello).\n-export([start/0]).\n\nstart() ->\n    io:fwrite("Hello, World!~n"),\n    Message = "This is Erlang",\n    io:fwrite(Message ++ "~n").`,
    Fortran: `program hello\n  implicit none\n  character(len=30) :: message\n  print *, "Hello, World!"\n  message = "This is Fortran"\n  print *, message\nend program hello`,
    SQL: `SELECT 'Hello, World!' AS Greeting;\n\n-- Variables are dialect-specific.\n-- Example for display:\n-- DECLARE @message VARCHAR(50) = 'This is SQL'; SELECT @message; -- (T-SQL)\n-- SET @message = 'This is SQL'; -- (MySQL user variable, conceptual)\n`,
    S: `# S language example (often run in R)\nprint("Hello, World!")\n\n# Variable\nmessage <- "This is S (via R syntax)"\nprint(message)`,
    MATLAB: `disp('Hello, World!');\n\n% Variable\nmessage = 'This is MATLAB';\ndisp(message);`,
    SAS: `DATA _NULL_;\n    PUT "Hello, World!";\n    /* Variable */\n    length message $ 20;\n    message = "This is SAS";\n    PUT message;\nRUN;`,
    Stata: `display "Hello, World!"\n\n* Variable (Stata uses macros for this kind of string)\nlocal message "This is Stata"\ndisplay "\`message'"`,
    R: `print("Hello, World!")\n\n# Variable\nmessage <- "This is R"\nprint(message)`,
    APL: `'Hello, World!'\n\n⍝ Variable\nmessage ← 'This is APL'\nmessage`,
    J: `'Hello, World!' NB. Output directly\n\nNB. Variable\nmessage =: 'This is J'\nmessage`,
    'Thompson sh': `# Thompson sh (Ken Thompson's original shell)\n# This uses Bourne-like syntax for modern representation\necho "Hello, World!"\n\n# Variables\nmessage="This is Thompson sh"\necho "$message"`,
    'Bourne sh': `echo "Hello, World!"\n\n# Variable\nmessage="This is Bourne sh"\necho "$message"`,
    Bash: `echo "Hello, World!"\n\n# Variable\nmessage="This is Bash"\necho "$message"`,
    Zsh: `echo "Hello, World!"\n\n# Variable\nmessage="This is Zsh"\necho "$message"`,
    PowerShell: `Write-Host "Hello, World!"\n\n# Variable\n$message = "This is PowerShell"\nWrite-Host $message`,
    CPL: `(* CPL (Combined Programming Language) *)\n(* Precursor to BCPL. Exact 'Hello World' hard to pin down. *)\n(* Conceptual example based on influences: *)\nWRITESTRING("Hello, World!")\nLET Message = "This is CPL"`,
    BCPL: `GET "libhdr.h"\n\nLET START () BE\n$(\n    WRITES ("Hello, World!*N")\n\n    // Variable\n    LET message = "This is BCPL"\n    WRITES (message)\n    WRITES ("*N")\n$)`,
    B: `/* B Language Example (precursor to C) */\nmain() {\n  extrn putstr; /* Assumed library function */\n  putstr("Hello, World!*n"); /* *n for newline in some B versions */\n\n  /* Variable (auto on stack) */\n  auto message[20]; \n  /* String assignment was manual, char by char, or via a function */\n  /* For example: message = "This is B" (conceptual) */\n}`,
    Crystal: `puts "Hello, World!"\n\n# Variable\nmessage = "This is Crystal"\nputs message`,
    Vale: `import printutils.*; // Or similar for print\n\nexported func main() {\n  print("Hello, World!\\n");\n  let message = "This is Vale";\n  print(message + "\\n");\n}`,
    Carbon: `// Carbon Language (Experimental)\npackage Main api;\n\nfn Main() -> i32 {\n  Print("Hello, World!");\n  var message: String = "This is Carbon";\n  Print(message);\n  return 0;\n}`,
    Mojo: `# Mojo 🔥\nfn main():\n    print("Hello, World!")\n\n    # Variable\n    var message = "This is Mojo"\n    print(message)`,
    COBOL: `       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HELLOWORLD.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WS-MESSAGE PIC X(30) VALUE "This is COBOL".\n       PROCEDURE DIVISION.\n           DISPLAY "Hello, World!".\n           DISPLAY WS-MESSAGE.\n           STOP RUN.`,
    Svelte: `// Svelte is a compiler, this is how you might display in a .svelte file\n<script>\n  let message = "This is Svelte (via JavaScript)";\n</script>\n\n<h1>Hello, World!</h1>\n<p>{message}</p>`,
};
