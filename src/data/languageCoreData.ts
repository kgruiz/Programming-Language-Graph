import { LanguageNode, InfluenceEdge } from '@/types';

export const initialNodesData: Omit<
    LanguageNode,
    | 'labelOriginal'
    | 'goodAtCategories'
    | 'badAtCategories'
    | 'goodTagsDisplay'
    | 'badTagsDisplay'
>[] = [
    // Nodes from the original HTML (ensure 'label' is the primary key/name)
    { id: 'Assembly', label: 'Assembly', group: 'misc', shape: 'box' },
    { id: 'Python', label: 'Python', group: 'misc', shape: 'box' },
    {
        id: 'Algol 60',
        label: 'Algol 60',
        group: 'c_syntax_algol',
        shape: 'box',
    },
    { id: 'C', label: 'C', group: 'c_syntax_core', shape: 'box' },
    { id: 'C++', label: 'C++', group: 'c_syntax_core', shape: 'box' },
    {
        id: 'Objective-C',
        label: 'Objective-C',
        group: 'c_syntax_core',
        shape: 'box',
    },
    { id: 'Perl', label: 'Perl', group: 'c_syntax_script', shape: 'box' },
    { id: 'Awk', label: 'Awk', group: 'c_syntax_script', shape: 'box' },
    {
        id: 'JavaScript',
        label: 'JavaScript',
        group: 'c_syntax_script',
        shape: 'box',
    },
    { id: 'PHP', label: 'PHP', group: 'c_syntax_script', shape: 'box' },
    { id: 'Java', label: 'Java', group: 'c_syntax_jvm', shape: 'box' },
    { id: 'D', label: 'D', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Rust', label: 'Rust', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Go', label: 'Go', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Zig', label: 'Zig', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Odin', label: 'Odin', group: 'c_syntax_modern', shape: 'box' },
    { id: 'V', label: 'V', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Swift', label: 'Swift', group: 'c_syntax_modern', shape: 'box' },
    { id: 'C#', label: 'C#', group: 'c_syntax_jvm', shape: 'box' },
    { id: 'Kotlin', label: 'Kotlin', group: 'c_syntax_jvm', shape: 'box' },
    { id: 'Scala', label: 'Scala', group: 'c_syntax_jvm', shape: 'box' },
    { id: 'Dart', label: 'Dart', group: 'c_syntax_script', shape: 'box' },
    {
        id: 'TypeScript',
        label: 'TypeScript',
        group: 'c_syntax_script',
        shape: 'box',
    },
    { id: 'ML', label: 'ML', group: 'ml', shape: 'box' },
    { id: 'Standard ML', label: 'Standard ML', group: 'ml', shape: 'box' },
    { id: 'Haskell', label: 'Haskell', group: 'ml', shape: 'box' },
    { id: 'OCaml', label: 'OCaml', group: 'ml', shape: 'box' },
    { id: 'F#', label: 'F#', group: 'ml', shape: 'box' },
    { id: 'Nim', label: 'Nim', group: 'ml', shape: 'box' },
    { id: 'Julia', label: 'Julia', group: 'stats', shape: 'box' },
    { id: 'Pascal', label: 'Pascal', group: 'pascal_like', shape: 'box' },
    { id: 'Modula-2', label: 'Modula-2', group: 'pascal_like', shape: 'box' },
    { id: 'ABC', label: 'ABC', group: 'pascal_like', shape: 'box' },
    { id: 'Ada', label: 'Ada', group: 'pascal_like', shape: 'box' },
    { id: 'Oberon', label: 'Oberon', group: 'pascal_like', shape: 'box' },
    { id: 'Lisp', label: 'Lisp', group: 'lisp', shape: 'box' },
    { id: 'Scheme', label: 'Scheme', group: 'lisp', shape: 'box' },
    { id: 'Common Lisp', label: 'Common Lisp', group: 'lisp', shape: 'box' },
    { id: 'Clojure', label: 'Clojure', group: 'lisp', shape: 'box' },
    { id: 'Racket', label: 'Racket', group: 'lisp', shape: 'box' },
    { id: 'Lua', label: 'Lua', group: 'c_syntax_script', shape: 'box' },
    { id: 'Simula', label: 'Simula', group: 'smalltalk', shape: 'box' },
    { id: 'Smalltalk', label: 'Smalltalk', group: 'smalltalk', shape: 'box' },
    { id: 'Ruby', label: 'Ruby', group: 'smalltalk', shape: 'box' },
    { id: 'Elixir', label: 'Elixir', group: 'logic', shape: 'box' },
    { id: 'Prolog', label: 'Prolog', group: 'logic', shape: 'box' },
    { id: 'Erlang', label: 'Erlang', group: 'logic', shape: 'box' },
    { id: 'Fortran', label: 'Fortran', group: 'stats', shape: 'box' },
    { id: 'SQL', label: 'SQL', group: 'misc', shape: 'box' },
    { id: 'S', label: 'S', group: 'stats', shape: 'box' },
    { id: 'MATLAB', label: 'MATLAB', group: 'stats', shape: 'box' },
    { id: 'SAS', label: 'SAS', group: 'stats', shape: 'box' },
    { id: 'Stata', label: 'Stata', group: 'stats', shape: 'box' },
    { id: 'R', label: 'R', group: 'stats', shape: 'box' },
    { id: 'APL', label: 'APL', group: 'array', shape: 'box' },
    { id: 'J', label: 'J', group: 'array', shape: 'box' },
    { id: 'Thompson sh', label: 'Thompson sh', group: 'shell', shape: 'box' },
    { id: 'Bourne sh', label: 'Bourne sh', group: 'shell', shape: 'box' },
    { id: 'Bash', label: 'Bash', group: 'shell', shape: 'box' },
    { id: 'Zsh', label: 'Zsh', group: 'shell', shape: 'box' },
    { id: 'PowerShell', label: 'PowerShell', group: 'shell', shape: 'box' },
    { id: 'CPL', label: 'CPL', group: 'intermediate', shape: 'box' },
    { id: 'BCPL', label: 'BCPL', group: 'intermediate', shape: 'box' },
    { id: 'B', label: 'B', group: 'intermediate', shape: 'box' },
    { id: 'Crystal', label: 'Crystal', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Vale', label: 'Vale', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Carbon', label: 'Carbon', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Mojo', label: 'Mojo', group: 'c_syntax_modern', shape: 'box' },
    { id: 'COBOL', label: 'COBOL', group: 'pascal_like', shape: 'box' },
    { id: 'Svelte', label: 'Svelte', group: 'c_syntax_script', shape: 'box' },
];

export const edgeData: InfluenceEdge[] = [
    // Edges from the original HTML
    { from: 'Assembly', to: 'Fortran', arrows: 'to' },
    { from: 'Assembly', to: 'COBOL', arrows: 'to' },
    { from: 'Assembly', to: 'Algol 60', arrows: 'to' },
    { from: 'Assembly', to: 'Lisp', arrows: 'to' },
    { from: 'Assembly', to: 'APL', arrows: 'to' },
    { from: 'Assembly', to: 'B', arrows: 'to' },
    { from: 'Algol 60', to: 'CPL', arrows: 'to' },
    { from: 'Algol 60', to: 'Pascal', arrows: 'to' },
    { from: 'Algol 60', to: 'Simula', arrows: 'to' },
    { from: 'Algol 60', to: 'Ada', arrows: 'to' },
    { from: 'CPL', to: 'BCPL', arrows: 'to' },
    { from: 'BCPL', to: 'B', arrows: 'to' },
    { from: 'B', to: 'C', arrows: 'to' },
    { from: 'C', to: 'C++', arrows: 'to' },
    { from: 'C', to: 'Objective-C', arrows: 'to' },
    { from: 'C', to: 'Perl', arrows: 'to' },
    { from: 'C', to: 'Awk', arrows: 'to' },
    { from: 'C', to: 'Python', arrows: 'to' },
    { from: 'C', to: 'JavaScript', arrows: 'to' },
    { from: 'C', to: 'PHP', arrows: 'to' },
    { from: 'C', to: 'Go', arrows: 'to' },
    { from: 'C', to: 'D', arrows: 'to' },
    { from: 'C', to: 'Rust', arrows: 'to' },
    { from: 'C', to: 'Java', arrows: 'to' },
    { from: 'C++', to: 'Java', arrows: 'to' },
    { from: 'C++', to: 'C#', arrows: 'to' },
    { from: 'C++', to: 'D', arrows: 'to' },
    { from: 'C++', to: 'Rust', arrows: 'to' },
    { from: 'C++', to: 'Go', arrows: 'to' },
    { from: 'C++', to: 'Zig', arrows: 'to' },
    { from: 'C++', to: 'Odin', arrows: 'to' },
    { from: 'C++', to: 'V', arrows: 'to' },
    { from: 'C++', to: 'Swift', arrows: 'to' },
    { from: 'C++', to: 'Carbon', arrows: 'to' },
    { from: 'C++', to: 'Vale', arrows: 'to' },
    { from: 'Objective-C', to: 'Swift', arrows: 'to' },
    { from: 'Java', to: 'C#', arrows: 'to' },
    { from: 'Java', to: 'Kotlin', arrows: 'to' },
    { from: 'Java', to: 'Scala', arrows: 'to' },
    { from: 'Java', to: 'Dart', arrows: 'to' },
    { from: 'C#', to: 'F#', arrows: 'to' },
    { from: 'C#', to: 'PowerShell', arrows: 'to' },
    { from: 'ML', to: 'Standard ML', arrows: 'to' },
    { from: 'ML', to: 'OCaml', arrows: 'to' },
    { from: 'ML', to: 'Haskell', arrows: 'to' },
    { from: 'ML', to: 'F#', arrows: 'to' },
    { from: 'ML', to: 'Rust', arrows: 'to' },
    { from: 'ML', to: 'Swift', arrows: 'to' },
    { from: 'Standard ML', to: 'F#', arrows: 'to' },
    { from: 'OCaml', to: 'F#', arrows: 'to' },
    { from: 'OCaml', to: 'Rust', arrows: 'to' },
    { from: 'OCaml', to: 'Swift', arrows: 'to' },
    { from: 'OCaml', to: 'Vale', arrows: 'to' },
    { from: 'Haskell', to: 'Scala', arrows: 'to' },
    { from: 'Haskell', to: 'Rust', arrows: 'to' },
    { from: 'Haskell', to: 'Nim', arrows: 'to' },
    { from: 'Haskell', to: 'Swift', arrows: 'to' },
    // { from: 'Haskell', to: 'Elm', arrows: 'to' }, // Elm not in nodes, remove or add node
    { from: 'Pascal', to: 'Modula-2', arrows: 'to' },
    { from: 'Pascal', to: 'Ada', arrows: 'to' },
    { from: 'Pascal', to: 'Oberon', arrows: 'to' },
    { from: 'Pascal', to: 'Nim', arrows: 'to' },
    { from: 'Pascal', to: 'Go', arrows: 'to' },
    { from: 'Modula-2', to: 'Oberon', arrows: 'to' },
    { from: 'Modula-2', to: 'Lua', arrows: 'to' },
    { from: 'Modula-2', to: 'Python', arrows: 'to' },
    { from: 'ABC', to: 'Python', arrows: 'to' },
    { from: 'Lisp', to: 'Scheme', arrows: 'to' },
    { from: 'Lisp', to: 'Common Lisp', arrows: 'to' },
    { from: 'Lisp', to: 'Clojure', arrows: 'to' },
    { from: 'Lisp', to: 'Racket', arrows: 'to' },
    { from: 'Lisp', to: 'Julia', arrows: 'to' },
    // { from: 'Lisp', to: 'Dylan', arrows: 'to' }, // Dylan not in nodes
    { from: 'Lisp', to: 'Ruby', arrows: 'to' },
    { from: 'Scheme', to: 'JavaScript', arrows: 'to' },
    { from: 'Scheme', to: 'Lua', arrows: 'to' },
    { from: 'Scheme', to: 'Python', arrows: 'to' },
    { from: 'Scheme', to: 'Haskell', arrows: 'to' },
    { from: 'Scheme', to: 'Racket', arrows: 'to' },
    { from: 'Common Lisp', to: 'Clojure', arrows: 'to' },
    { from: 'Common Lisp', to: 'Julia', arrows: 'to' },
    { from: 'Simula', to: 'Smalltalk', arrows: 'to' },
    { from: 'Simula', to: 'C++', arrows: 'to' },
    { from: 'Smalltalk', to: 'Objective-C', arrows: 'to' },
    { from: 'Smalltalk', to: 'Ruby', arrows: 'to' },
    { from: 'Smalltalk', to: 'Python', arrows: 'to' },
    { from: 'Smalltalk', to: 'Java', arrows: 'to' },
    // { from: 'Smalltalk', to: 'Self', arrows: 'to' }, // Self not in nodes
    { from: 'Awk', to: 'Perl', arrows: 'to' },
    { from: 'Perl', to: 'PHP', arrows: 'to' },
    { from: 'Perl', to: 'Ruby', arrows: 'to' },
    { from: 'Perl', to: 'Python', arrows: 'to' },
    { from: 'Python', to: 'Julia', arrows: 'to' },
    { from: 'Python', to: 'Nim', arrows: 'to' },
    { from: 'Python', to: 'Go', arrows: 'to' },
    { from: 'Python', to: 'Mojo', arrows: 'to' },
    { from: 'Python', to: 'Swift', arrows: 'to' },
    // { from: 'Python', to: 'Cobra', arrows: 'to' }, // Cobra not in nodes
    { from: 'JavaScript', to: 'TypeScript', arrows: 'to' },
    { from: 'JavaScript', to: 'Dart', arrows: 'to' },
    { from: 'JavaScript', to: 'Svelte', arrows: 'to' },
    // { from: 'JavaScript', to: 'CoffeeScript', arrows: 'to' }, // CoffeeScript not in nodes
    { from: 'Prolog', to: 'Erlang', arrows: 'to' },
    { from: 'Erlang', to: 'Elixir', arrows: 'to' },
    { from: 'Fortran', to: 'S', arrows: 'to' },
    { from: 'Fortran', to: 'MATLAB', arrows: 'to' },
    { from: 'Fortran', to: 'SAS', arrows: 'to' },
    { from: 'Fortran', to: 'Stata', arrows: 'to' },
    { from: 'S', to: 'R', arrows: 'to' },
    { from: 'R', to: 'Julia', arrows: 'to' },
    { from: 'APL', to: 'J', arrows: 'to' },
    // { from: 'APL', to: 'K', arrows: 'to' }, // K not in nodes
    { from: 'APL', to: 'S', arrows: 'to' },
    { from: 'Thompson sh', to: 'Bourne sh', arrows: 'to' },
    { from: 'Bourne sh', to: 'Bash', arrows: 'to' },
    // { from: 'Bourne sh', to: 'Ksh', arrows: 'to' }, // Ksh not in nodes
    { from: 'Bash', to: 'Zsh', arrows: 'to' },
    { from: 'Bash', to: 'PowerShell', arrows: 'to' },
    { from: 'Ruby', to: 'Elixir', arrows: 'to' },
    { from: 'Ruby', to: 'Crystal', arrows: 'to' },
    { from: 'Rust', to: 'Swift', arrows: 'to' },
    { from: 'Rust', to: 'Vale', arrows: 'to' },
    { from: 'Rust', to: 'Zig', arrows: 'to' },
    { from: 'Rust', to: 'Carbon', arrows: 'to' },
    { from: 'Go', to: 'Odin', arrows: 'to' },
    { from: 'Go', to: 'V', arrows: 'to' },
    { from: 'Go', to: 'Zig', arrows: 'to' },
];
