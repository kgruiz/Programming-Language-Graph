defmodule MyListUtils do
  def sum([]), do: 0
  def sum([head | tail]), do: head + sum(tail)
  def map([], _func), do: []
  def map([head | tail], func), do: [func.(head) | map(tail, func)]
  def process_tuple({:ok, value}), do: "Success: #{value}"
  def process_tuple({:error, reason}), do: "Failure: #{reason}"
  def process_tuple(_other), do: "Unknown format"
end
numbers = [1, 2, 3, 4, 5]
IO.puts "Sum: #{MyListUtils.sum(numbers)}"
IO.puts "Squared: #{inspect MyListUtils.map(numbers, fn x -> x * x end)}"
IO.puts MyListUtils.process_tuple({:ok, "Data loaded"})
