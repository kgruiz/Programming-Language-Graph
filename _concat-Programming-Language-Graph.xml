<?xml version="1.0" encoding="UTF-8"?>
<concatenation>
  <matchedFilesDirStructureList>
    <dirEntry>"Programming-Language-Graph": ["next-env.d.ts", "package.json", "pnpm-lock.yaml", "tsconfig.json"]</dirEntry>
    <dirEntry>"Programming-Language-Graph/src": ["emotion.d.ts"]</dirEntry>
    <dirEntry>"Programming-Language-Graph/src/components": ["Controls.tsx", "Graph.tsx", "Layout.tsx", "LoadingIndicator.tsx", "Sidebar.tsx"]</dirEntry>
    <dirEntry>"Programming-Language-Graph/src/data": ["index.ts", "languageCoreData.ts", "rankingData.ts", "syntaxData.ts"]</dirEntry>
    <dirEntry>"Programming-Language-Graph/src/pages": ["index.tsx", "_app.tsx"]</dirEntry>
    <dirEntry>"Programming-Language-Graph/src/styles": ["GlobalStyles.tsx", "theme.ts"]</dirEntry>
    <dirEntry>"Programming-Language-Graph/src/types": ["index.ts"]</dirEntry>
  </matchedFilesDirStructureList>
  <fileContents count="19">
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/next-env.d.ts</path>
      <content><![CDATA[
/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/pages/api-reference/config/typescript for more information.
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/next-env.d.ts
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/package.json</path>
      <content><![CDATA[
{
    "name": "programming-language-graph",
    "version": "1.0.0",
    "description": "",
    "main": "index.js",
    "scripts": 
    {
        "dev": "next dev",
        "build": "next build",
        "start": "next start",
        "lint": "next lint",
        "typecheck": "tsc --noEmit"
    },
    "keywords": 
    [
    ],
    "author": "",
    "license": "GPL-3.0-or-later",
    "packageManager": "pnpm@10.10.0",
    "dependencies": 
    {
        "@emotion/react": "^11.14.0",
        "@emotion/styled": "^11.14.0",
        "@types/node": "^22.15.14",
        "@types/react": "^19.1.3",
        "next": "^15.3.1",
        "react": "^19.1.0",
        "react-dom": "^19.1.0",
        "typescript": "^5.8.3",
        "vis-network": "^9.1.9"
    }
}]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/package.json
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/pnpm-lock.yaml</path>
      <content><![CDATA[
lockfileVersion: '9.0'

settings:
  autoInstallPeers: true
  excludeLinksFromLockfile: false

importers:

  .:
    dependencies:
      '@emotion/react':
        specifier: ^11.14.0
        version: 11.14.0(@types/react@19.1.3)(react@19.1.0)
      '@emotion/styled':
        specifier: ^11.14.0
        version: 11.14.0(@emotion/react@11.14.0(@types/react@19.1.3)(react@19.1.0))(@types/react@19.1.3)(react@19.1.0)
      '@types/node':
        specifier: ^22.15.14
        version: 22.15.14
      '@types/react':
        specifier: ^19.1.3
        version: 19.1.3
      next:
        specifier: ^15.3.1
        version: 15.3.1(react-dom@19.1.0(react@19.1.0))(react@19.1.0)
      react:
        specifier: ^19.1.0
        version: 19.1.0
      react-dom:
        specifier: ^19.1.0
        version: 19.1.0(react@19.1.0)
      typescript:
        specifier: ^5.8.3
        version: 5.8.3
      vis-network:
        specifier: ^9.1.9
        version: 9.1.9(@egjs/hammerjs@2.0.17)(component-emitter@1.3.1)(keycharm@0.4.0)(uuid@9.0.1)(vis-data@7.1.9(uuid@9.0.1)(vis-util@5.0.7(@egjs/hammerjs@2.0.17)(component-emitter@1.3.1)))(vis-util@5.0.7(@egjs/hammerjs@2.0.17)(component-emitter@1.3.1))

packages:

  '@babel/code-frame@7.27.1':
    resolution: {integrity: sha512-cjQ7ZlQ0Mv3b47hABuTevyTuYN4i+loJKGeV9flcCgIK37cCXRh+L1bd3iBHlynerhQ7BhCkn2BPbQUL+rGqFg==}
    engines: {node: '>=6.9.0'}

  '@babel/generator@7.27.1':
    resolution: {integrity: sha512-UnJfnIpc/+JO0/+KRVQNGU+y5taA5vCbwN8+azkX6beii/ZF+enZJSOKo11ZSzGJjlNfJHfQtmQT8H+9TXPG2w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-module-imports@7.27.1':
    resolution: {integrity: sha512-0gSFWUPNXNopqtIPQvlD5WgXYI5GY2kP2cCvoT8kczjbfcfuIljTbcWrulD1CIPIX2gt1wghbDy08yE1p+/r3w==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-string-parser@7.27.1':
    resolution: {integrity: sha512-qMlSxKbpRlAridDExk92nSobyDdpPijUq2DW6oDnUqd0iOGxmQjyqhMIihI9+zv4LPyZdRje2cavWPbCbWm3eA==}
    engines: {node: '>=6.9.0'}

  '@babel/helper-validator-identifier@7.27.1':
    resolution: {integrity: sha512-D2hP9eA+Sqx1kBZgzxZh0y1trbuU+JoDkiEwqhQ36nodYqJwyEIhPSdMNd7lOm/4io72luTPWH20Yda0xOuUow==}
    engines: {node: '>=6.9.0'}

  '@babel/parser@7.27.2':
    resolution: {integrity: sha512-QYLs8299NA7WM/bZAdp+CviYYkVoYXlDW2rzliy3chxd1PQjej7JORuMJDJXJUb9g0TT+B99EwaVLKmX+sPXWw==}
    engines: {node: '>=6.0.0'}
    hasBin: true

  '@babel/runtime@7.27.1':
    resolution: {integrity: sha512-1x3D2xEk2fRo3PAhwQwu5UubzgiVWSXTBfWpVd2Mx2AzRqJuDJCsgaDVZ7HB5iGzDW1Hl1sWN2mFyKjmR9uAog==}
    engines: {node: '>=6.9.0'}

  '@babel/template@7.27.2':
    resolution: {integrity: sha512-LPDZ85aEJyYSd18/DkjNh4/y1ntkE5KwUHWTiqgRxruuZL2F1yuHligVHLvcHY2vMHXttKFpJn6LwfI7cw7ODw==}
    engines: {node: '>=6.9.0'}

  '@babel/traverse@7.27.1':
    resolution: {integrity: sha512-ZCYtZciz1IWJB4U61UPu4KEaqyfj+r5T1Q5mqPo+IBpcG9kHv30Z0aD8LXPgC1trYa6rK0orRyAhqUgk4MjmEg==}
    engines: {node: '>=6.9.0'}

  '@babel/types@7.27.1':
    resolution: {integrity: sha512-+EzkxvLNfiUeKMgy/3luqfsCWFRXLb7U6wNQTk60tovuckwB15B191tJWvpp4HjiQWdJkCxO3Wbvc6jlk3Xb2Q==}
    engines: {node: '>=6.9.0'}

  '@egjs/hammerjs@2.0.17':
    resolution: {integrity: sha512-XQsZgjm2EcVUiZQf11UBJQfmZeEmOW8DpI1gsFeln6w0ae0ii4dMQEQ0kjl6DspdWX1aGY1/loyXnP0JS06e/A==}
    engines: {node: '>=0.8.0'}

  '@emnapi/runtime@1.4.3':
    resolution: {integrity: sha512-pBPWdu6MLKROBX05wSNKcNb++m5Er+KQ9QkB+WVM+pW2Kx9hoSrVTnu3BdkI5eBLZoKu/J6mW/B6i6bJB2ytXQ==}

  '@emotion/babel-plugin@11.13.5':
    resolution: {integrity: sha512-pxHCpT2ex+0q+HH91/zsdHkw/lXd468DIN2zvfvLtPKLLMo6gQj7oLObq8PhkrxOZb/gGCq03S3Z7PDhS8pduQ==}

  '@emotion/cache@11.14.0':
    resolution: {integrity: sha512-L/B1lc/TViYk4DcpGxtAVbx0ZyiKM5ktoIyafGkH6zg/tj+mA+NE//aPYKG0k8kCHSHVJrpLpcAlOBEXQ3SavA==}

  '@emotion/hash@0.9.2':
    resolution: {integrity: sha512-MyqliTZGuOm3+5ZRSaaBGP3USLw6+EGykkwZns2EPC5g8jJ4z9OrdZY9apkl3+UP9+sdz76YYkwCKP5gh8iY3g==}

  '@emotion/is-prop-valid@1.3.1':
    resolution: {integrity: sha512-/ACwoqx7XQi9knQs/G0qKvv5teDMhD7bXYns9N/wM8ah8iNb8jZ2uNO0YOgiq2o2poIvVtJS2YALasQuMSQ7Kw==}

  '@emotion/memoize@0.9.0':
    resolution: {integrity: sha512-30FAj7/EoJ5mwVPOWhAyCX+FPfMDrVecJAM+Iw9NRoSl4BBAQeqj4cApHHUXOVvIPgLVDsCFoz/hGD+5QQD1GQ==}

  '@emotion/react@11.14.0':
    resolution: {integrity: sha512-O000MLDBDdk/EohJPFUqvnp4qnHeYkVP5B0xEG0D/L7cOKP9kefu2DXn8dj74cQfsEzUqh+sr1RzFqiL1o+PpA==}
    peerDependencies:
      '@types/react': '*'
      react: '>=16.8.0'
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@emotion/serialize@1.3.3':
    resolution: {integrity: sha512-EISGqt7sSNWHGI76hC7x1CksiXPahbxEOrC5RjmFRJTqLyEK9/9hZvBbiYn70dw4wuwMKiEMCUlR6ZXTSWQqxA==}

  '@emotion/sheet@1.4.0':
    resolution: {integrity: sha512-fTBW9/8r2w3dXWYM4HCB1Rdp8NLibOw2+XELH5m5+AkWiL/KqYX6dc0kKYlaYyKjrQ6ds33MCdMPEwgs2z1rqg==}

  '@emotion/styled@11.14.0':
    resolution: {integrity: sha512-XxfOnXFffatap2IyCeJyNov3kiDQWoR08gPUQxvbL7fxKryGBKUZUkG6Hz48DZwVrJSVh9sJboyV1Ds4OW6SgA==}
    peerDependencies:
      '@emotion/react': ^11.0.0-rc.0
      '@types/react': '*'
      react: '>=16.8.0'
    peerDependenciesMeta:
      '@types/react':
        optional: true

  '@emotion/unitless@0.10.0':
    resolution: {integrity: sha512-dFoMUuQA20zvtVTuxZww6OHoJYgrzfKM1t52mVySDJnMSEa08ruEvdYQbhvyu6soU+NeLVd3yKfTfT0NeV6qGg==}

  '@emotion/use-insertion-effect-with-fallbacks@1.2.0':
    resolution: {integrity: sha512-yJMtVdH59sxi/aVJBpk9FQq+OR8ll5GT8oWd57UpeaKEVGab41JWaCFA7FRLoMLloOZF/c/wsPoe+bfGmRKgDg==}
    peerDependencies:
      react: '>=16.8.0'

  '@emotion/utils@1.4.2':
    resolution: {integrity: sha512-3vLclRofFziIa3J2wDh9jjbkUz9qk5Vi3IZ/FSTKViB0k+ef0fPV7dYrUIugbgupYDx7v9ud/SjrtEP8Y4xLoA==}

  '@emotion/weak-memoize@0.4.0':
    resolution: {integrity: sha512-snKqtPW01tN0ui7yu9rGv69aJXr/a/Ywvl11sUjNtEcRc+ng/mQriFL0wLXMef74iHa/EkftbDzU9F8iFbH+zg==}

  '@img/sharp-darwin-arm64@0.34.1':
    resolution: {integrity: sha512-pn44xgBtgpEbZsu+lWf2KNb6OAf70X68k+yk69Ic2Xz11zHR/w24/U49XT7AeRwJ0Px+mhALhU5LPci1Aymk7A==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [darwin]

  '@img/sharp-darwin-x64@0.34.1':
    resolution: {integrity: sha512-VfuYgG2r8BpYiOUN+BfYeFo69nP/MIwAtSJ7/Zpxc5QF3KS22z8Pvg3FkrSFJBPNQ7mmcUcYQFBmEQp7eu1F8Q==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [darwin]

  '@img/sharp-libvips-darwin-arm64@1.1.0':
    resolution: {integrity: sha512-HZ/JUmPwrJSoM4DIQPv/BfNh9yrOA8tlBbqbLz4JZ5uew2+o22Ik+tHQJcih7QJuSa0zo5coHTfD5J8inqj9DA==}
    cpu: [arm64]
    os: [darwin]

  '@img/sharp-libvips-darwin-x64@1.1.0':
    resolution: {integrity: sha512-Xzc2ToEmHN+hfvsl9wja0RlnXEgpKNmftriQp6XzY/RaSfwD9th+MSh0WQKzUreLKKINb3afirxW7A0fz2YWuQ==}
    cpu: [x64]
    os: [darwin]

  '@img/sharp-libvips-linux-arm64@1.1.0':
    resolution: {integrity: sha512-IVfGJa7gjChDET1dK9SekxFFdflarnUB8PwW8aGwEoF3oAsSDuNUTYS+SKDOyOJxQyDC1aPFMuRYLoDInyV9Ew==}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-libvips-linux-arm@1.1.0':
    resolution: {integrity: sha512-s8BAd0lwUIvYCJyRdFqvsj+BJIpDBSxs6ivrOPm/R7piTs5UIwY5OjXrP2bqXC9/moGsyRa37eYWYCOGVXxVrA==}
    cpu: [arm]
    os: [linux]

  '@img/sharp-libvips-linux-ppc64@1.1.0':
    resolution: {integrity: sha512-tiXxFZFbhnkWE2LA8oQj7KYR+bWBkiV2nilRldT7bqoEZ4HiDOcePr9wVDAZPi/Id5fT1oY9iGnDq20cwUz8lQ==}
    cpu: [ppc64]
    os: [linux]

  '@img/sharp-libvips-linux-s390x@1.1.0':
    resolution: {integrity: sha512-xukSwvhguw7COyzvmjydRb3x/09+21HykyapcZchiCUkTThEQEOMtBj9UhkaBRLuBrgLFzQ2wbxdeCCJW/jgJA==}
    cpu: [s390x]
    os: [linux]

  '@img/sharp-libvips-linux-x64@1.1.0':
    resolution: {integrity: sha512-yRj2+reB8iMg9W5sULM3S74jVS7zqSzHG3Ol/twnAAkAhnGQnpjj6e4ayUz7V+FpKypwgs82xbRdYtchTTUB+Q==}
    cpu: [x64]
    os: [linux]

  '@img/sharp-libvips-linuxmusl-arm64@1.1.0':
    resolution: {integrity: sha512-jYZdG+whg0MDK+q2COKbYidaqW/WTz0cc1E+tMAusiDygrM4ypmSCjOJPmFTvHHJ8j/6cAGyeDWZOsK06tP33w==}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-libvips-linuxmusl-x64@1.1.0':
    resolution: {integrity: sha512-wK7SBdwrAiycjXdkPnGCPLjYb9lD4l6Ze2gSdAGVZrEL05AOUJESWU2lhlC+Ffn5/G+VKuSm6zzbQSzFX/P65A==}
    cpu: [x64]
    os: [linux]

  '@img/sharp-linux-arm64@0.34.1':
    resolution: {integrity: sha512-kX2c+vbvaXC6vly1RDf/IWNXxrlxLNpBVWkdpRq5Ka7OOKj6nr66etKy2IENf6FtOgklkg9ZdGpEu9kwdlcwOQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-linux-arm@0.34.1':
    resolution: {integrity: sha512-anKiszvACti2sGy9CirTlNyk7BjjZPiML1jt2ZkTdcvpLU1YH6CXwRAZCA2UmRXnhiIftXQ7+Oh62Ji25W72jA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm]
    os: [linux]

  '@img/sharp-linux-s390x@0.34.1':
    resolution: {integrity: sha512-7s0KX2tI9mZI2buRipKIw2X1ufdTeaRgwmRabt5bi9chYfhur+/C1OXg3TKg/eag1W+6CCWLVmSauV1owmRPxA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [s390x]
    os: [linux]

  '@img/sharp-linux-x64@0.34.1':
    resolution: {integrity: sha512-wExv7SH9nmoBW3Wr2gvQopX1k8q2g5V5Iag8Zk6AVENsjwd+3adjwxtp3Dcu2QhOXr8W9NusBU6XcQUohBZ5MA==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [linux]

  '@img/sharp-linuxmusl-arm64@0.34.1':
    resolution: {integrity: sha512-DfvyxzHxw4WGdPiTF0SOHnm11Xv4aQexvqhRDAoD00MzHekAj9a/jADXeXYCDFH/DzYruwHbXU7uz+H+nWmSOQ==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [arm64]
    os: [linux]

  '@img/sharp-linuxmusl-x64@0.34.1':
    resolution: {integrity: sha512-pax/kTR407vNb9qaSIiWVnQplPcGU8LRIJpDT5o8PdAx5aAA7AS3X9PS8Isw1/WfqgQorPotjrZL3Pqh6C5EBg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [linux]

  '@img/sharp-wasm32@0.34.1':
    resolution: {integrity: sha512-YDybQnYrLQfEpzGOQe7OKcyLUCML4YOXl428gOOzBgN6Gw0rv8dpsJ7PqTHxBnXnwXr8S1mYFSLSa727tpz0xg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [wasm32]

  '@img/sharp-win32-ia32@0.34.1':
    resolution: {integrity: sha512-WKf/NAZITnonBf3U1LfdjoMgNO5JYRSlhovhRhMxXVdvWYveM4kM3L8m35onYIdh75cOMCo1BexgVQcCDzyoWw==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [ia32]
    os: [win32]

  '@img/sharp-win32-x64@0.34.1':
    resolution: {integrity: sha512-hw1iIAHpNE8q3uMIRCgGOeDoz9KtFNarFLQclLxr/LK1VBkj8nby18RjFvr6aP7USRYAjTZW6yisnBWMX571Tw==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}
    cpu: [x64]
    os: [win32]

  '@jridgewell/gen-mapping@0.3.8':
    resolution: {integrity: sha512-imAbBGkb+ebQyxKgzv5Hu2nmROxoDOXHh80evxdoXNOrvAnVx7zimzc1Oo5h9RlfV4vPXaE2iM5pOFbvOCClWA==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/resolve-uri@3.1.2':
    resolution: {integrity: sha512-bRISgCIjP20/tbWSPWMEi54QVPRZExkuD9lJL+UIxUKtwVJA8wW1Trb1jMs1RFXo1CBTNZ/5hpC9QvmKWdopKw==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/set-array@1.2.1':
    resolution: {integrity: sha512-R8gLRTZeyp03ymzP/6Lil/28tGeGEzhx1q2k703KGWRAI1VdvPIXdG70VJc2pAMw3NA6JKL5hhFu1sJX0Mnn/A==}
    engines: {node: '>=6.0.0'}

  '@jridgewell/sourcemap-codec@1.5.0':
    resolution: {integrity: sha512-gv3ZRaISU3fjPAgNsriBRqGWQL6quFx04YMPW/zD8XMLsU32mhCCbfbO6KZFLjvYpCZ8zyDEgqsgf+PwPaM7GQ==}

  '@jridgewell/trace-mapping@0.3.25':
    resolution: {integrity: sha512-vNk6aEwybGtawWmy/PzwnGDOjCkLWSD2wqvjGGAgOAwCGWySYXfYoxt00IJkTF+8Lb57DwOb3Aa0o9CApepiYQ==}

  '@next/env@15.3.1':
    resolution: {integrity: sha512-cwK27QdzrMblHSn9DZRV+DQscHXRuJv6MydlJRpFSqJWZrTYMLzKDeyueJNN9MGd8NNiUKzDQADAf+dMLXX7YQ==}

  '@next/swc-darwin-arm64@15.3.1':
    resolution: {integrity: sha512-hjDw4f4/nla+6wysBL07z52Gs55Gttp5Bsk5/8AncQLJoisvTBP0pRIBK/B16/KqQyH+uN4Ww8KkcAqJODYH3w==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [darwin]

  '@next/swc-darwin-x64@15.3.1':
    resolution: {integrity: sha512-q+aw+cJ2ooVYdCEqZVk+T4Ni10jF6Fo5DfpEV51OupMaV5XL6pf3GCzrk6kSSZBsMKZtVC1Zm/xaNBFpA6bJ2g==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [darwin]

  '@next/swc-linux-arm64-gnu@15.3.1':
    resolution: {integrity: sha512-wBQ+jGUI3N0QZyWmmvRHjXjTWFy8o+zPFLSOyAyGFI94oJi+kK/LIZFJXeykvgXUk1NLDAEFDZw/NVINhdk9FQ==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-arm64-musl@15.3.1':
    resolution: {integrity: sha512-IIxXEXRti/AulO9lWRHiCpUUR8AR/ZYLPALgiIg/9ENzMzLn3l0NSxVdva7R/VDcuSEBo0eGVCe3evSIHNz0Hg==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [linux]

  '@next/swc-linux-x64-gnu@15.3.1':
    resolution: {integrity: sha512-bfI4AMhySJbyXQIKH5rmLJ5/BP7bPwuxauTvVEiJ/ADoddaA9fgyNNCcsbu9SlqfHDoZmfI6g2EjzLwbsVTr5A==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-linux-x64-musl@15.3.1':
    resolution: {integrity: sha512-FeAbR7FYMWR+Z+M5iSGytVryKHiAsc0x3Nc3J+FD5NVbD5Mqz7fTSy8CYliXinn7T26nDMbpExRUI/4ekTvoiA==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [linux]

  '@next/swc-win32-arm64-msvc@15.3.1':
    resolution: {integrity: sha512-yP7FueWjphQEPpJQ2oKmshk/ppOt+0/bB8JC8svPUZNy0Pi3KbPx2Llkzv1p8CoQa+D2wknINlJpHf3vtChVBw==}
    engines: {node: '>= 10'}
    cpu: [arm64]
    os: [win32]

  '@next/swc-win32-x64-msvc@15.3.1':
    resolution: {integrity: sha512-3PMvF2zRJAifcRNni9uMk/gulWfWS+qVI/pagd+4yLF5bcXPZPPH2xlYRYOsUjmCJOXSTAC2PjRzbhsRzR2fDQ==}
    engines: {node: '>= 10'}
    cpu: [x64]
    os: [win32]

  '@swc/counter@0.1.3':
    resolution: {integrity: sha512-e2BR4lsJkkRlKZ/qCHPw9ZaSxc0MVUd7gtbtaB7aMvHeJVYe8sOB8DBZkP2DtISHGSku9sCK6T6cnY0CtXrOCQ==}

  '@swc/helpers@0.5.15':
    resolution: {integrity: sha512-JQ5TuMi45Owi4/BIMAJBoSQoOJu12oOk/gADqlcUL9JEdHB8vyjUSsxqeNXnmXHjYKMi2WcYtezGEEhqUI/E2g==}

  '@types/hammerjs@2.0.46':
    resolution: {integrity: sha512-ynRvcq6wvqexJ9brDMS4BnBLzmr0e14d6ZJTEShTBWKymQiHwlAyGu0ZPEFI2Fh1U53F7tN9ufClWM5KvqkKOw==}

  '@types/node@22.15.14':
    resolution: {integrity: sha512-BL1eyu/XWsFGTtDWOYULQEs4KR0qdtYfCxYAUYRoB7JP7h9ETYLgQTww6kH8Sj2C0pFGgrpM0XKv6/kbIzYJ1g==}

  '@types/parse-json@4.0.2':
    resolution: {integrity: sha512-dISoDXWWQwUquiKsyZ4Ng+HX2KsPL7LyHKHQwgGFEA3IaKac4Obd+h2a/a6waisAoepJlBcx9paWqjA8/HVjCw==}

  '@types/react@19.1.3':
    resolution: {integrity: sha512-dLWQ+Z0CkIvK1J8+wrDPwGxEYFA4RAyHoZPxHVGspYmFVnwGSNT24cGIhFJrtfRnWVuW8X7NO52gCXmhkVUWGQ==}

  babel-plugin-macros@3.1.0:
    resolution: {integrity: sha512-Cg7TFGpIr01vOQNODXOOaGz2NpCU5gl8x1qJFbb6hbZxR7XrcE2vtbAsTAbJ7/xwJtUuJEw8K8Zr/AE0LHlesg==}
    engines: {node: '>=10', npm: '>=6'}

  busboy@1.6.0:
    resolution: {integrity: sha512-8SFQbg/0hQ9xy3UNTB0YEnsNBbWfhf7RtnzpL7TkBiTBRfrQ9Fxcnz7VJsleJpyp6rVLvXiuORqjlHi5q+PYuA==}
    engines: {node: '>=10.16.0'}

  callsites@3.1.0:
    resolution: {integrity: sha512-P8BjAsXvZS+VIDUI11hHCQEv74YT67YUi5JJFNWIqL235sBmjX4+qx9Muvls5ivyNENctx46xQLQ3aTuE7ssaQ==}
    engines: {node: '>=6'}

  caniuse-lite@1.0.30001717:
    resolution: {integrity: sha512-auPpttCq6BDEG8ZAuHJIplGw6GODhjw+/11e7IjpnYCxZcW/ONgPs0KVBJ0d1bY3e2+7PRe5RCLyP+PfwVgkYw==}

  client-only@0.0.1:
    resolution: {integrity: sha512-IV3Ou0jSMzZrd3pZ48nLkT9DA7Ag1pnPzaiQhpW7c3RbcqqzvzzVu+L8gfqMp/8IM2MQtSiqaCxrrcfu8I8rMA==}

  color-convert@2.0.1:
    resolution: {integrity: sha512-RRECPsj7iu/xb5oKYcsFHSppFNnsj/52OVTRKb4zP5onXwVF3zVmmToNcOfGC+CRDpfK/U584fMg38ZHCaElKQ==}
    engines: {node: '>=7.0.0'}

  color-name@1.1.4:
    resolution: {integrity: sha512-dOy+3AuW3a2wNbZHIuMZpTcgjGuLU/uBL/ubcZF9OXbDo8ff4O8yVp5Bf0efS8uEoYo5q4Fx7dY9OgQGXgAsQA==}

  color-string@1.9.1:
    resolution: {integrity: sha512-shrVawQFojnZv6xM40anx4CkoDP+fZsw/ZerEMsW/pyzsRbElpsL/DBVW7q3ExxwusdNXI3lXpuhEZkzs8p5Eg==}

  color@4.2.3:
    resolution: {integrity: sha512-1rXeuUUiGGrykh+CeBdu5Ie7OJwinCgQY0bc7GCRxy5xVHy+moaqkpL/jqQq0MtQOeYcrqEz4abc5f0KtU7W4A==}
    engines: {node: '>=12.5.0'}

  component-emitter@1.3.1:
    resolution: {integrity: sha512-T0+barUSQRTUQASh8bx02dl+DhF54GtIDY13Y3m9oWTklKbb3Wv974meRpeZ3lp1JpLVECWWNHC4vaG2XHXouQ==}

  convert-source-map@1.9.0:
    resolution: {integrity: sha512-ASFBup0Mz1uyiIjANan1jzLQami9z1PoYSZCiiYW2FczPbenXc45FZdBZLzOT+r6+iciuEModtmCti+hjaAk0A==}

  cosmiconfig@7.1.0:
    resolution: {integrity: sha512-AdmX6xUzdNASswsFtmwSt7Vj8po9IuqXm0UXz7QKPuEUmPB4XyjGfaAr2PSuELMwkRMVH1EpIkX5bTZGRB3eCA==}
    engines: {node: '>=10'}

  csstype@3.1.3:
    resolution: {integrity: sha512-M1uQkMl8rQK/szD0LNhtqxIPLpimGm8sOBwU7lLnCpSbTyY3yeU1Vc7l4KT5zT4s/yOxHH5O7tIuuLOCnLADRw==}

  debug@4.4.0:
    resolution: {integrity: sha512-6WTZ/IxCY/T6BALoZHaE4ctp9xm+Z5kY/pzYaCHRFeyVhojxlrm+46y68HA6hr0TcwEssoxNiDEUJQjfPZ/RYA==}
    engines: {node: '>=6.0'}
    peerDependencies:
      supports-color: '*'
    peerDependenciesMeta:
      supports-color:
        optional: true

  detect-libc@2.0.4:
    resolution: {integrity: sha512-3UDv+G9CsCKO1WKMGw9fwq/SWJYbI0c5Y7LU1AXYoDdbhE2AHQ6N6Nb34sG8Fj7T5APy8qXDCKuuIHd1BR0tVA==}
    engines: {node: '>=8'}

  error-ex@1.3.2:
    resolution: {integrity: sha512-7dFHNmqeFSEt2ZBsCriorKnn3Z2pj+fd9kmI6QoWw4//DL+icEBfc0U7qJCisqrTsKTjw4fNFy2pW9OqStD84g==}

  escape-string-regexp@4.0.0:
    resolution: {integrity: sha512-TtpcNJ3XAzx3Gq8sWRzJaVajRs0uVxA2YAkdb1jm2YkPz4G6egUFAyA3n5vtEIZefPk5Wa4UXbKuS5fKkJWdgA==}
    engines: {node: '>=10'}

  find-root@1.1.0:
    resolution: {integrity: sha512-NKfW6bec6GfKc0SGx1e07QZY9PE99u0Bft/0rzSD5k3sO/vwkVUpDUKVm5Gpp5Ue3YfShPFTX2070tDs5kB9Ng==}

  function-bind@1.1.2:
    resolution: {integrity: sha512-7XHNxH7qX9xG5mIwxkhumTox/MIRNcOgDrxWsMt2pAr23WHp6MrRlN7FBSFpCpr+oVO0F744iUgR82nJMfG2SA==}

  globals@11.12.0:
    resolution: {integrity: sha512-WOBp/EEGUiIsJSp7wcv/y6MO+lV9UoncWqxuFfm8eBwzWNgyfBd6Gz+IeKQ9jCmyhoH99g15M3T+QaVHFjizVA==}
    engines: {node: '>=4'}

  hasown@2.0.2:
    resolution: {integrity: sha512-0hJU9SCPvmMzIBdZFqNPXWa6dqh7WdH0cII9y+CyS8rG3nL48Bclra9HmKhVVUHyPWNH5Y7xDwAB7bfgSjkUMQ==}
    engines: {node: '>= 0.4'}

  hoist-non-react-statics@3.3.2:
    resolution: {integrity: sha512-/gGivxi8JPKWNm/W0jSmzcMPpfpPLc3dY/6GxhX2hQ9iGj3aDfklV4ET7NjKpSinLpJ5vafa9iiGIEZg10SfBw==}

  import-fresh@3.3.1:
    resolution: {integrity: sha512-TR3KfrTZTYLPB6jUjfx6MF9WcWrHL9su5TObK4ZkYgBdWKPOFoSoQIdEuTuR82pmtxH2spWG9h6etwfr1pLBqQ==}
    engines: {node: '>=6'}

  is-arrayish@0.2.1:
    resolution: {integrity: sha512-zz06S8t0ozoDXMG+ube26zeCTNXcKIPJZJi8hBrF4idCLms4CG9QtK7qBl1boi5ODzFpjswb5JPmHCbMpjaYzg==}

  is-arrayish@0.3.2:
    resolution: {integrity: sha512-eVRqCvVlZbuw3GrM63ovNSNAeA1K16kaR/LRY/92w0zxQ5/1YzwblUX652i4Xs9RwAGjW9d9y6X88t8OaAJfWQ==}

  is-core-module@2.16.1:
    resolution: {integrity: sha512-UfoeMA6fIJ8wTYFEUjelnaGI67v6+N7qXJEvQuIGa99l4xsCruSYOVSQ0uPANn4dAzm8lkYPaKLrrijLq7x23w==}
    engines: {node: '>= 0.4'}

  js-tokens@4.0.0:
    resolution: {integrity: sha512-RdJUflcE3cUzKiMqQgsCu06FPu9UdIJO0beYbPhHN4k6apgJtifcoCtT9bcxOpYBtpD2kCM6Sbzg4CausW/PKQ==}

  jsesc@3.1.0:
    resolution: {integrity: sha512-/sM3dO2FOzXjKQhJuo0Q173wf2KOo8t4I8vHy6lF9poUp7bKT0/NHE8fPX23PwfhnykfqnC2xRxOnVw5XuGIaA==}
    engines: {node: '>=6'}
    hasBin: true

  json-parse-even-better-errors@2.3.1:
    resolution: {integrity: sha512-xyFwyhro/JEof6Ghe2iz2NcXoj2sloNsWr/XsERDK/oiPCfaNhl5ONfp+jQdAZRQQ0IJWNzH9zIZF7li91kh2w==}

  keycharm@0.4.0:
    resolution: {integrity: sha512-TyQTtsabOVv3MeOpR92sIKk/br9wxS+zGj4BG7CR8YbK4jM3tyIBaF0zhzeBUMx36/Q/iQLOKKOT+3jOQtemRQ==}

  lines-and-columns@1.2.4:
    resolution: {integrity: sha512-7ylylesZQ/PV29jhEDl3Ufjo6ZX7gCqJr5F7PKrqc93v7fzSymt1BpwEU8nAUXs8qzzvqhbjhK5QZg6Mt/HkBg==}

  ms@2.1.3:
    resolution: {integrity: sha512-6FlzubTLZG3J2a/NVCAleEhjzq5oxgHyaCU9yYXvcLsvoVaHJq/s5xXI6/XXP6tz7R9xAOtHnSO/tXtF3WRTlA==}

  nanoid@3.3.11:
    resolution: {integrity: sha512-N8SpfPUnUp1bK+PMYW8qSWdl9U+wwNWI4QKxOYDy9JAro3WMX7p2OeVRF9v+347pnakNevPmiHhNmZ2HbFA76w==}
    engines: {node: ^10 || ^12 || ^13.7 || ^14 || >=15.0.1}
    hasBin: true

  next@15.3.1:
    resolution: {integrity: sha512-8+dDV0xNLOgHlyBxP1GwHGVaNXsmp+2NhZEYrXr24GWLHtt27YrBPbPuHvzlhi7kZNYjeJNR93IF5zfFu5UL0g==}
    engines: {node: ^18.18.0 || ^19.8.0 || >= 20.0.0}
    hasBin: true
    peerDependencies:
      '@opentelemetry/api': ^1.1.0
      '@playwright/test': ^1.41.2
      babel-plugin-react-compiler: '*'
      react: ^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0
      react-dom: ^18.2.0 || 19.0.0-rc-de68d2f4-20241204 || ^19.0.0
      sass: ^1.3.0
    peerDependenciesMeta:
      '@opentelemetry/api':
        optional: true
      '@playwright/test':
        optional: true
      babel-plugin-react-compiler:
        optional: true
      sass:
        optional: true

  parent-module@1.0.1:
    resolution: {integrity: sha512-GQ2EWRpQV8/o+Aw8YqtfZZPfNRWZYkbidE9k5rpl/hC3vtHHBfGm2Ifi6qWV+coDGkrUKZAxE3Lot5kcsRlh+g==}
    engines: {node: '>=6'}

  parse-json@5.2.0:
    resolution: {integrity: sha512-ayCKvm/phCGxOkYRSCM82iDwct8/EonSEgCSxWxD7ve6jHggsFl4fZVQBPRNgQoKiuV/odhFrGzQXZwbifC8Rg==}
    engines: {node: '>=8'}

  path-parse@1.0.7:
    resolution: {integrity: sha512-LDJzPVEEEPR+y48z93A0Ed0yXb8pAByGWo/k5YYdYgpY2/2EsOsksJrq7lOHxryrVOn1ejG6oAp8ahvOIQD8sw==}

  path-type@4.0.0:
    resolution: {integrity: sha512-gDKb8aZMDeD/tZWs9P6+q0J9Mwkdl6xMV8TjnGP3qJVJ06bdMgkbBlLU8IdfOsIsFz2BW1rNVT3XuNEl8zPAvw==}
    engines: {node: '>=8'}

  picocolors@1.1.1:
    resolution: {integrity: sha512-xceH2snhtb5M9liqDsmEw56le376mTZkEX/jEb/RxNFyegNul7eNslCXP9FDj/Lcu0X8KEyMceP2ntpaHrDEVA==}

  postcss@8.4.31:
    resolution: {integrity: sha512-PS08Iboia9mts/2ygV3eLpY5ghnUcfLV/EXTOW1E2qYxJKGGBUtNjN76FYHnMs36RmARn41bC0AZmn+rR0OVpQ==}
    engines: {node: ^10 || ^12 || >=14}

  react-dom@19.1.0:
    resolution: {integrity: sha512-Xs1hdnE+DyKgeHJeJznQmYMIBG3TKIHJJT95Q58nHLSrElKlGQqDTR2HQ9fx5CN/Gk6Vh/kupBTDLU11/nDk/g==}
    peerDependencies:
      react: ^19.1.0

  react-is@16.13.1:
    resolution: {integrity: sha512-24e6ynE2H+OKt4kqsOvNd8kBpV65zoxbA4BVsEOB3ARVWQki/DHzaUoC5KuON/BiccDaCCTZBuOcfZs70kR8bQ==}

  react@19.1.0:
    resolution: {integrity: sha512-FS+XFBNvn3GTAWq26joslQgWNoFu08F4kl0J4CgdNKADkdSGXQyTCnKteIAJy96Br6YbpEU1LSzV5dYtjMkMDg==}
    engines: {node: '>=0.10.0'}

  resolve-from@4.0.0:
    resolution: {integrity: sha512-pb/MYmXstAkysRFx8piNI1tGFNQIFA3vkE3Gq4EuA1dF6gHp/+vgZqsCGJapvy8N3Q+4o7FwvquPJcnZ7RYy4g==}
    engines: {node: '>=4'}

  resolve@1.22.10:
    resolution: {integrity: sha512-NPRy+/ncIMeDlTAsuqwKIiferiawhefFJtkNSW0qZJEqMEb+qBt/77B/jGeeek+F0uOeN05CDa6HXbbIgtVX4w==}
    engines: {node: '>= 0.4'}
    hasBin: true

  scheduler@0.26.0:
    resolution: {integrity: sha512-NlHwttCI/l5gCPR3D1nNXtWABUmBwvZpEQiD4IXSbIDq8BzLIK/7Ir5gTFSGZDUu37K5cMNp0hFtzO38sC7gWA==}

  semver@7.7.1:
    resolution: {integrity: sha512-hlq8tAfn0m/61p4BVRcPzIGr6LKiMwo4VM6dGi6pt4qcRkmNzTcWq6eCEjEh+qXjkMDvPlOFFSGwQjoEa6gyMA==}
    engines: {node: '>=10'}
    hasBin: true

  sharp@0.34.1:
    resolution: {integrity: sha512-1j0w61+eVxu7DawFJtnfYcvSv6qPFvfTaqzTQ2BLknVhHTwGS8sc63ZBF4rzkWMBVKybo4S5OBtDdZahh2A1xg==}
    engines: {node: ^18.17.0 || ^20.3.0 || >=21.0.0}

  simple-swizzle@0.2.2:
    resolution: {integrity: sha512-JA//kQgZtbuY83m+xT+tXJkmJncGMTFT+C+g2h2R9uxkYIrE2yy9sgmcLhCnw57/WSD+Eh3J97FPEDFnbXnDUg==}

  source-map-js@1.2.1:
    resolution: {integrity: sha512-UXWMKhLOwVKb728IUtQPXxfYU+usdybtUrK/8uGE8CQMvrhOpwvzDBwj0QhSL7MQc7vIsISBG8VQ8+IDQxpfQA==}
    engines: {node: '>=0.10.0'}

  source-map@0.5.7:
    resolution: {integrity: sha512-LbrmJOMUSdEVxIKvdcJzQC+nQhe8FUZQTXQy6+I75skNgn3OoQ0DZA8YnFa7gp8tqtL3KPf1kmo0R5DoApeSGQ==}
    engines: {node: '>=0.10.0'}

  streamsearch@1.1.0:
    resolution: {integrity: sha512-Mcc5wHehp9aXz1ax6bZUyY5afg9u2rv5cqQI3mRrYkGC8rW2hM02jWuwjtL++LS5qinSyhj2QfLyNsuc+VsExg==}
    engines: {node: '>=10.0.0'}

  styled-jsx@5.1.6:
    resolution: {integrity: sha512-qSVyDTeMotdvQYoHWLNGwRFJHC+i+ZvdBRYosOFgC+Wg1vx4frN2/RG/NA7SYqqvKNLf39P2LSRA2pu6n0XYZA==}
    engines: {node: '>= 12.0.0'}
    peerDependencies:
      '@babel/core': '*'
      babel-plugin-macros: '*'
      react: '>= 16.8.0 || 17.x.x || ^18.0.0-0 || ^19.0.0-0'
    peerDependenciesMeta:
      '@babel/core':
        optional: true
      babel-plugin-macros:
        optional: true

  stylis@4.2.0:
    resolution: {integrity: sha512-Orov6g6BB1sDfYgzWfTHDOxamtX1bE/zo104Dh9e6fqJ3PooipYyfJ0pUmrZO2wAvO8YbEyeFrkV91XTsGMSrw==}

  supports-preserve-symlinks-flag@1.0.0:
    resolution: {integrity: sha512-ot0WnXS9fgdkgIcePe6RHNk1WA8+muPa6cSjeR3V8K27q9BB1rTE3R1p7Hv0z1ZyAc8s6Vvv8DIyWf681MAt0w==}
    engines: {node: '>= 0.4'}

  tslib@2.8.1:
    resolution: {integrity: sha512-oJFu94HQb+KVduSUQL7wnpmqnfmLsOA/nAh6b6EH0wCEoK0/mPeXU6c3wKDV83MkOuHPRHtSXKKU99IBazS/2w==}

  typescript@5.8.3:
    resolution: {integrity: sha512-p1diW6TqL9L07nNxvRMM7hMMw4c5XOo/1ibL4aAIGmSAt9slTE1Xgw5KWuof2uTOvCg9BY7ZRi+GaF+7sfgPeQ==}
    engines: {node: '>=14.17'}
    hasBin: true

  undici-types@6.21.0:
    resolution: {integrity: sha512-iwDZqg0QAGrg9Rav5H4n0M64c3mkR59cJ6wQp+7C4nI0gsmExaedaYLNO44eT4AtBBwjbTiGPMlt2Md0T9H9JQ==}

  uuid@9.0.1:
    resolution: {integrity: sha512-b+1eJOlsR9K8HJpow9Ok3fiWOWSIcIzXodvv0rQjVoOVNpWMpxf1wZNpt4y9h10odCNrqnYp1OBzRktckBe3sA==}
    hasBin: true

  vis-data@7.1.9:
    resolution: {integrity: sha512-COQsxlVrmcRIbZMMTYwD+C2bxYCFDNQ2EHESklPiInbD/Pk3JZ6qNL84Bp9wWjYjAzXfSlsNaFtRk+hO9yBPWA==}
    peerDependencies:
      uuid: ^3.4.0 || ^7.0.0 || ^8.0.0 || ^9.0.0
      vis-util: ^5.0.1

  vis-network@9.1.9:
    resolution: {integrity: sha512-Ft+hLBVyiLstVYSb69Q1OIQeh3FeUxHJn0WdFcq+BFPqs+Vq1ibMi2sb//cxgq1CP7PH4yOXnHxEH/B2VzpZYA==}
    peerDependencies:
      '@egjs/hammerjs': ^2.0.0
      component-emitter: ^1.3.0
      keycharm: ^0.2.0 || ^0.3.0 || ^0.4.0
      uuid: ^3.4.0 || ^7.0.0 || ^8.0.0 || ^9.0.0
      vis-data: ^6.3.0 || ^7.0.0
      vis-util: ^5.0.1

  vis-util@5.0.7:
    resolution: {integrity: sha512-E3L03G3+trvc/X4LXvBfih3YIHcKS2WrP0XTdZefr6W6Qi/2nNCqZfe4JFfJU6DcQLm6Gxqj2Pfl+02859oL5A==}
    engines: {node: '>=8'}
    peerDependencies:
      '@egjs/hammerjs': ^2.0.0
      component-emitter: ^1.3.0 || ^2.0.0

  yaml@1.10.2:
    resolution: {integrity: sha512-r3vXyErRCYJ7wg28yvBY5VSoAF8ZvlcW9/BwUzEtUsjvX/DKs24dIkuwjtuprwJJHsbyUbLApepYTR1BN4uHrg==}
    engines: {node: '>= 6'}

snapshots:

  '@babel/code-frame@7.27.1':
    dependencies:
      '@babel/helper-validator-identifier': 7.27.1
      js-tokens: 4.0.0
      picocolors: 1.1.1

  '@babel/generator@7.27.1':
    dependencies:
      '@babel/parser': 7.27.2
      '@babel/types': 7.27.1
      '@jridgewell/gen-mapping': 0.3.8
      '@jridgewell/trace-mapping': 0.3.25
      jsesc: 3.1.0

  '@babel/helper-module-imports@7.27.1':
    dependencies:
      '@babel/traverse': 7.27.1
      '@babel/types': 7.27.1
    transitivePeerDependencies:
      - supports-color

  '@babel/helper-string-parser@7.27.1': {}

  '@babel/helper-validator-identifier@7.27.1': {}

  '@babel/parser@7.27.2':
    dependencies:
      '@babel/types': 7.27.1

  '@babel/runtime@7.27.1': {}

  '@babel/template@7.27.2':
    dependencies:
      '@babel/code-frame': 7.27.1
      '@babel/parser': 7.27.2
      '@babel/types': 7.27.1

  '@babel/traverse@7.27.1':
    dependencies:
      '@babel/code-frame': 7.27.1
      '@babel/generator': 7.27.1
      '@babel/parser': 7.27.2
      '@babel/template': 7.27.2
      '@babel/types': 7.27.1
      debug: 4.4.0
      globals: 11.12.0
    transitivePeerDependencies:
      - supports-color

  '@babel/types@7.27.1':
    dependencies:
      '@babel/helper-string-parser': 7.27.1
      '@babel/helper-validator-identifier': 7.27.1

  '@egjs/hammerjs@2.0.17':
    dependencies:
      '@types/hammerjs': 2.0.46

  '@emnapi/runtime@1.4.3':
    dependencies:
      tslib: 2.8.1
    optional: true

  '@emotion/babel-plugin@11.13.5':
    dependencies:
      '@babel/helper-module-imports': 7.27.1
      '@babel/runtime': 7.27.1
      '@emotion/hash': 0.9.2
      '@emotion/memoize': 0.9.0
      '@emotion/serialize': 1.3.3
      babel-plugin-macros: 3.1.0
      convert-source-map: 1.9.0
      escape-string-regexp: 4.0.0
      find-root: 1.1.0
      source-map: 0.5.7
      stylis: 4.2.0
    transitivePeerDependencies:
      - supports-color

  '@emotion/cache@11.14.0':
    dependencies:
      '@emotion/memoize': 0.9.0
      '@emotion/sheet': 1.4.0
      '@emotion/utils': 1.4.2
      '@emotion/weak-memoize': 0.4.0
      stylis: 4.2.0

  '@emotion/hash@0.9.2': {}

  '@emotion/is-prop-valid@1.3.1':
    dependencies:
      '@emotion/memoize': 0.9.0

  '@emotion/memoize@0.9.0': {}

  '@emotion/react@11.14.0(@types/react@19.1.3)(react@19.1.0)':
    dependencies:
      '@babel/runtime': 7.27.1
      '@emotion/babel-plugin': 11.13.5
      '@emotion/cache': 11.14.0
      '@emotion/serialize': 1.3.3
      '@emotion/use-insertion-effect-with-fallbacks': 1.2.0(react@19.1.0)
      '@emotion/utils': 1.4.2
      '@emotion/weak-memoize': 0.4.0
      hoist-non-react-statics: 3.3.2
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.3
    transitivePeerDependencies:
      - supports-color

  '@emotion/serialize@1.3.3':
    dependencies:
      '@emotion/hash': 0.9.2
      '@emotion/memoize': 0.9.0
      '@emotion/unitless': 0.10.0
      '@emotion/utils': 1.4.2
      csstype: 3.1.3

  '@emotion/sheet@1.4.0': {}

  '@emotion/styled@11.14.0(@emotion/react@11.14.0(@types/react@19.1.3)(react@19.1.0))(@types/react@19.1.3)(react@19.1.0)':
    dependencies:
      '@babel/runtime': 7.27.1
      '@emotion/babel-plugin': 11.13.5
      '@emotion/is-prop-valid': 1.3.1
      '@emotion/react': 11.14.0(@types/react@19.1.3)(react@19.1.0)
      '@emotion/serialize': 1.3.3
      '@emotion/use-insertion-effect-with-fallbacks': 1.2.0(react@19.1.0)
      '@emotion/utils': 1.4.2
      react: 19.1.0
    optionalDependencies:
      '@types/react': 19.1.3
    transitivePeerDependencies:
      - supports-color

  '@emotion/unitless@0.10.0': {}

  '@emotion/use-insertion-effect-with-fallbacks@1.2.0(react@19.1.0)':
    dependencies:
      react: 19.1.0

  '@emotion/utils@1.4.2': {}

  '@emotion/weak-memoize@0.4.0': {}

  '@img/sharp-darwin-arm64@0.34.1':
    optionalDependencies:
      '@img/sharp-libvips-darwin-arm64': 1.1.0
    optional: true

  '@img/sharp-darwin-x64@0.34.1':
    optionalDependencies:
      '@img/sharp-libvips-darwin-x64': 1.1.0
    optional: true

  '@img/sharp-libvips-darwin-arm64@1.1.0':
    optional: true

  '@img/sharp-libvips-darwin-x64@1.1.0':
    optional: true

  '@img/sharp-libvips-linux-arm64@1.1.0':
    optional: true

  '@img/sharp-libvips-linux-arm@1.1.0':
    optional: true

  '@img/sharp-libvips-linux-ppc64@1.1.0':
    optional: true

  '@img/sharp-libvips-linux-s390x@1.1.0':
    optional: true

  '@img/sharp-libvips-linux-x64@1.1.0':
    optional: true

  '@img/sharp-libvips-linuxmusl-arm64@1.1.0':
    optional: true

  '@img/sharp-libvips-linuxmusl-x64@1.1.0':
    optional: true

  '@img/sharp-linux-arm64@0.34.1':
    optionalDependencies:
      '@img/sharp-libvips-linux-arm64': 1.1.0
    optional: true

  '@img/sharp-linux-arm@0.34.1':
    optionalDependencies:
      '@img/sharp-libvips-linux-arm': 1.1.0
    optional: true

  '@img/sharp-linux-s390x@0.34.1':
    optionalDependencies:
      '@img/sharp-libvips-linux-s390x': 1.1.0
    optional: true

  '@img/sharp-linux-x64@0.34.1':
    optionalDependencies:
      '@img/sharp-libvips-linux-x64': 1.1.0
    optional: true

  '@img/sharp-linuxmusl-arm64@0.34.1':
    optionalDependencies:
      '@img/sharp-libvips-linuxmusl-arm64': 1.1.0
    optional: true

  '@img/sharp-linuxmusl-x64@0.34.1':
    optionalDependencies:
      '@img/sharp-libvips-linuxmusl-x64': 1.1.0
    optional: true

  '@img/sharp-wasm32@0.34.1':
    dependencies:
      '@emnapi/runtime': 1.4.3
    optional: true

  '@img/sharp-win32-ia32@0.34.1':
    optional: true

  '@img/sharp-win32-x64@0.34.1':
    optional: true

  '@jridgewell/gen-mapping@0.3.8':
    dependencies:
      '@jridgewell/set-array': 1.2.1
      '@jridgewell/sourcemap-codec': 1.5.0
      '@jridgewell/trace-mapping': 0.3.25

  '@jridgewell/resolve-uri@3.1.2': {}

  '@jridgewell/set-array@1.2.1': {}

  '@jridgewell/sourcemap-codec@1.5.0': {}

  '@jridgewell/trace-mapping@0.3.25':
    dependencies:
      '@jridgewell/resolve-uri': 3.1.2
      '@jridgewell/sourcemap-codec': 1.5.0

  '@next/env@15.3.1': {}

  '@next/swc-darwin-arm64@15.3.1':
    optional: true

  '@next/swc-darwin-x64@15.3.1':
    optional: true

  '@next/swc-linux-arm64-gnu@15.3.1':
    optional: true

  '@next/swc-linux-arm64-musl@15.3.1':
    optional: true

  '@next/swc-linux-x64-gnu@15.3.1':
    optional: true

  '@next/swc-linux-x64-musl@15.3.1':
    optional: true

  '@next/swc-win32-arm64-msvc@15.3.1':
    optional: true

  '@next/swc-win32-x64-msvc@15.3.1':
    optional: true

  '@swc/counter@0.1.3': {}

  '@swc/helpers@0.5.15':
    dependencies:
      tslib: 2.8.1

  '@types/hammerjs@2.0.46': {}

  '@types/node@22.15.14':
    dependencies:
      undici-types: 6.21.0

  '@types/parse-json@4.0.2': {}

  '@types/react@19.1.3':
    dependencies:
      csstype: 3.1.3

  babel-plugin-macros@3.1.0:
    dependencies:
      '@babel/runtime': 7.27.1
      cosmiconfig: 7.1.0
      resolve: 1.22.10

  busboy@1.6.0:
    dependencies:
      streamsearch: 1.1.0

  callsites@3.1.0: {}

  caniuse-lite@1.0.30001717: {}

  client-only@0.0.1: {}

  color-convert@2.0.1:
    dependencies:
      color-name: 1.1.4
    optional: true

  color-name@1.1.4:
    optional: true

  color-string@1.9.1:
    dependencies:
      color-name: 1.1.4
      simple-swizzle: 0.2.2
    optional: true

  color@4.2.3:
    dependencies:
      color-convert: 2.0.1
      color-string: 1.9.1
    optional: true

  component-emitter@1.3.1: {}

  convert-source-map@1.9.0: {}

  cosmiconfig@7.1.0:
    dependencies:
      '@types/parse-json': 4.0.2
      import-fresh: 3.3.1
      parse-json: 5.2.0
      path-type: 4.0.0
      yaml: 1.10.2

  csstype@3.1.3: {}

  debug@4.4.0:
    dependencies:
      ms: 2.1.3

  detect-libc@2.0.4:
    optional: true

  error-ex@1.3.2:
    dependencies:
      is-arrayish: 0.2.1

  escape-string-regexp@4.0.0: {}

  find-root@1.1.0: {}

  function-bind@1.1.2: {}

  globals@11.12.0: {}

  hasown@2.0.2:
    dependencies:
      function-bind: 1.1.2

  hoist-non-react-statics@3.3.2:
    dependencies:
      react-is: 16.13.1

  import-fresh@3.3.1:
    dependencies:
      parent-module: 1.0.1
      resolve-from: 4.0.0

  is-arrayish@0.2.1: {}

  is-arrayish@0.3.2:
    optional: true

  is-core-module@2.16.1:
    dependencies:
      hasown: 2.0.2

  js-tokens@4.0.0: {}

  jsesc@3.1.0: {}

  json-parse-even-better-errors@2.3.1: {}

  keycharm@0.4.0: {}

  lines-and-columns@1.2.4: {}

  ms@2.1.3: {}

  nanoid@3.3.11: {}

  next@15.3.1(react-dom@19.1.0(react@19.1.0))(react@19.1.0):
    dependencies:
      '@next/env': 15.3.1
      '@swc/counter': 0.1.3
      '@swc/helpers': 0.5.15
      busboy: 1.6.0
      caniuse-lite: 1.0.30001717
      postcss: 8.4.31
      react: 19.1.0
      react-dom: 19.1.0(react@19.1.0)
      styled-jsx: 5.1.6(react@19.1.0)
    optionalDependencies:
      '@next/swc-darwin-arm64': 15.3.1
      '@next/swc-darwin-x64': 15.3.1
      '@next/swc-linux-arm64-gnu': 15.3.1
      '@next/swc-linux-arm64-musl': 15.3.1
      '@next/swc-linux-x64-gnu': 15.3.1
      '@next/swc-linux-x64-musl': 15.3.1
      '@next/swc-win32-arm64-msvc': 15.3.1
      '@next/swc-win32-x64-msvc': 15.3.1
      sharp: 0.34.1
    transitivePeerDependencies:
      - '@babel/core'
      - babel-plugin-macros

  parent-module@1.0.1:
    dependencies:
      callsites: 3.1.0

  parse-json@5.2.0:
    dependencies:
      '@babel/code-frame': 7.27.1
      error-ex: 1.3.2
      json-parse-even-better-errors: 2.3.1
      lines-and-columns: 1.2.4

  path-parse@1.0.7: {}

  path-type@4.0.0: {}

  picocolors@1.1.1: {}

  postcss@8.4.31:
    dependencies:
      nanoid: 3.3.11
      picocolors: 1.1.1
      source-map-js: 1.2.1

  react-dom@19.1.0(react@19.1.0):
    dependencies:
      react: 19.1.0
      scheduler: 0.26.0

  react-is@16.13.1: {}

  react@19.1.0: {}

  resolve-from@4.0.0: {}

  resolve@1.22.10:
    dependencies:
      is-core-module: 2.16.1
      path-parse: 1.0.7
      supports-preserve-symlinks-flag: 1.0.0

  scheduler@0.26.0: {}

  semver@7.7.1:
    optional: true

  sharp@0.34.1:
    dependencies:
      color: 4.2.3
      detect-libc: 2.0.4
      semver: 7.7.1
    optionalDependencies:
      '@img/sharp-darwin-arm64': 0.34.1
      '@img/sharp-darwin-x64': 0.34.1
      '@img/sharp-libvips-darwin-arm64': 1.1.0
      '@img/sharp-libvips-darwin-x64': 1.1.0
      '@img/sharp-libvips-linux-arm': 1.1.0
      '@img/sharp-libvips-linux-arm64': 1.1.0
      '@img/sharp-libvips-linux-ppc64': 1.1.0
      '@img/sharp-libvips-linux-s390x': 1.1.0
      '@img/sharp-libvips-linux-x64': 1.1.0
      '@img/sharp-libvips-linuxmusl-arm64': 1.1.0
      '@img/sharp-libvips-linuxmusl-x64': 1.1.0
      '@img/sharp-linux-arm': 0.34.1
      '@img/sharp-linux-arm64': 0.34.1
      '@img/sharp-linux-s390x': 0.34.1
      '@img/sharp-linux-x64': 0.34.1
      '@img/sharp-linuxmusl-arm64': 0.34.1
      '@img/sharp-linuxmusl-x64': 0.34.1
      '@img/sharp-wasm32': 0.34.1
      '@img/sharp-win32-ia32': 0.34.1
      '@img/sharp-win32-x64': 0.34.1
    optional: true

  simple-swizzle@0.2.2:
    dependencies:
      is-arrayish: 0.3.2
    optional: true

  source-map-js@1.2.1: {}

  source-map@0.5.7: {}

  streamsearch@1.1.0: {}

  styled-jsx@5.1.6(react@19.1.0):
    dependencies:
      client-only: 0.0.1
      react: 19.1.0

  stylis@4.2.0: {}

  supports-preserve-symlinks-flag@1.0.0: {}

  tslib@2.8.1: {}

  typescript@5.8.3: {}

  undici-types@6.21.0: {}

  uuid@9.0.1: {}

  vis-data@7.1.9(uuid@9.0.1)(vis-util@5.0.7(@egjs/hammerjs@2.0.17)(component-emitter@1.3.1)):
    dependencies:
      uuid: 9.0.1
      vis-util: 5.0.7(@egjs/hammerjs@2.0.17)(component-emitter@1.3.1)

  vis-network@9.1.9(@egjs/hammerjs@2.0.17)(component-emitter@1.3.1)(keycharm@0.4.0)(uuid@9.0.1)(vis-data@7.1.9(uuid@9.0.1)(vis-util@5.0.7(@egjs/hammerjs@2.0.17)(component-emitter@1.3.1)))(vis-util@5.0.7(@egjs/hammerjs@2.0.17)(component-emitter@1.3.1)):
    dependencies:
      '@egjs/hammerjs': 2.0.17
      component-emitter: 1.3.1
      keycharm: 0.4.0
      uuid: 9.0.1
      vis-data: 7.1.9(uuid@9.0.1)(vis-util@5.0.7(@egjs/hammerjs@2.0.17)(component-emitter@1.3.1))
      vis-util: 5.0.7(@egjs/hammerjs@2.0.17)(component-emitter@1.3.1)

  vis-util@5.0.7(@egjs/hammerjs@2.0.17)(component-emitter@1.3.1):
    dependencies:
      '@egjs/hammerjs': 2.0.17
      component-emitter: 1.3.1

  yaml@1.10.2: {}
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/pnpm-lock.yaml
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/components/Controls.tsx</path>
      <content><![CDATA[
import React from 'react';
import styled from '@emotion/styled';
import { categoriesOrder as defaultCategoriesOrder } from '@/data'; // Data for categoriesOrder
import type { CategoryShortToFullName as CategoryShortToFullNameType } from '@/types'; // Type definition

interface ControlsProps {
    categories: string[]; // This is typeof defaultCategoriesOrder from @/data
    categoryMap: CategoryShortToFullNameType; // This is the data object from @/data, conforming to the type from @/types
    selectedCategory: string;
    onCategoryChange: (category: string) => void;
    onHighlightGood: () => void;
    onHighlightBad: () => void;
    onResetHighlights: () => void;
    activeHighlightType?: 'good' | 'bad';
}

const ControlsContainer = styled.div`
    padding: 12px 20px;
    background-color: ${(props) =>
        props.theme.colors.controlsContainerBackground};
    border-bottom: 1px solid ${(props) => props.theme.colors.separator};
    display: flex;
    flex-wrap: wrap;
    gap: 12px;
    align-items: center;
    box-shadow: ${(props) => props.theme.shadows.controlsContainer};
`;

const ControlLabel = styled.label`
    font-size: 14px;
    color: ${(props) => props.theme.colors.labelLight};
    margin-right: -4px; /* Pull closer to select */
`;

const Select = styled.select`
    padding: 8px 14px;
    border-radius: 8px;
    border: 1px solid ${(props) => props.theme.colors.controlBorder};
    background-color: ${(props) => props.theme.colors.controlBackground};
    color: ${(props) => props.theme.colors.controlText};
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.15s ease, border-color 0.15s ease,
        box-shadow 0.15s ease;
    box-shadow: ${(props) => props.theme.shadows.control};
    min-width: 180px;

    &:hover {
        background-color: ${(props) =>
            props.theme.colors.controlHoverBackground};
        border-color: ${(props) => props.theme.colors.controlHoverBorder};
    }
`;

// Props passed directly to the Button component in JSX
interface ButtonElementProps {
    isActiveGood?: boolean;
    isActiveBad?: boolean;
    isReset?: boolean;
}

const Button = styled.button<ButtonElementProps>`
    padding: 8px 14px;
    border-radius: 8px;
    border: 1px solid ${(props) => props.theme.colors.controlBorder};
    background-color: ${(props) => props.theme.colors.controlBackground};
    color: ${(props) => props.theme.colors.controlText};
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.15s ease, border-color 0.15s ease,
        box-shadow 0.15s ease;
    box-shadow: ${(props) => props.theme.shadows.control};

    &:hover {
        background-color: ${(props) =>
            props.theme.colors.controlHoverBackground};
        border-color: ${(props) => props.theme.colors.controlHoverBorder};
    }
    &:active {
        background-color: #2a2a2c; /* Slightly darker for active state */
        box-shadow: inset 0 1px 2px rgba(0, 0, 0, 0.1);
    }

    ${(props) =>
        (props.isActiveGood || props.isActiveBad) &&
        `
        color: white;
        font-weight: 500;
    `}

    ${(props) =>
        props.isActiveGood &&
        `
        background-color: ${props.theme.colors.highlightGood};
        border-color: ${props.theme.colors.highlightGoodBorder};
        box-shadow: 0 1px 2px rgba(0,0,0,0.1), 0 0 0 2px ${props.theme.colors.highlightGood}66; /* 40% opacity */
    `}

    ${(props) =>
        props.isActiveBad &&
        `
        background-color: ${props.theme.colors.highlightBad};
        border-color: ${props.theme.colors.highlightBadBorder};
        box-shadow: 0 1px 2px rgba(0,0,0,0.1), 0 0 0 2px ${props.theme.colors.highlightBad}66; /* 40% opacity */
    `}

    ${(props) =>
        props.isReset &&
        `
        background-color: ${props.theme.colors.resetButtonBackground};
        color: white;
        border-color: ${props.theme.colors.resetButtonBorder};
        &:hover {
            background-color: ${props.theme.colors.resetButtonHoverBackground};
        }
    `}
`;

const Controls: React.FC<ControlsProps> = ({
    categories,
    categoryMap,
    selectedCategory,
    onCategoryChange,
    onHighlightGood,
    onHighlightBad,
    onResetHighlights,
    activeHighlightType,
}) => {
    return (
        <ControlsContainer>
            <ControlLabel htmlFor="categorySelect">
                Highlight Category:
            </ControlLabel>
            <Select
                id="categorySelect"
                value={selectedCategory}
                onChange={(e) => onCategoryChange(e.target.value)}
            >
                {categories.map(
                    (
                        catShort: string // Added type for catShort
                    ) => (
                        <option
                            key={catShort}
                            value={catShort}
                        >
                            {categoryMap[catShort] || catShort}
                        </option>
                    )
                )}
            </Select>
            <Button
                onClick={onHighlightGood}
                isActiveGood={activeHighlightType === 'good'}
            >
                👍 Good In
            </Button>
            <Button
                onClick={onHighlightBad}
                isActiveBad={activeHighlightType === 'bad'}
            >
                👎 Bad In
            </Button>
            <Button
                onClick={onResetHighlights}
                isReset
            >
                Reset All
            </Button>
        </ControlsContainer>
    );
};

export default Controls;
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/components/Controls.tsx
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/components/Graph.tsx</path>
      <content><![CDATA[
import React, { useEffect, useRef } from 'react';
import type { Options } from '@/types';
import styled from '@emotion/styled';
import { VisDataSetNodes, VisDataSetEdges } from '@/types';

declare const vis: any;

interface GraphProps {
    nodesData: VisDataSetNodes | null;
    edgesData: VisDataSetEdges | null;
    options: Options;
    onNodeClick: (nodeId: string | null) => void;
    onStabilizationDone: () => void;
    setNetworkInstance: (network: any | null) => void;
}

const GraphContainerDiv = styled.div`
    display: flex;
    flex-direction: column;
    flex: 1;
    min-height: 0;
    position: relative;
    overflow: hidden;
`;

const LanguageGraphDiv = styled.div`
    width: 100%;
    height: 100%;
    box-sizing: border-box;
    background-color: ${(props) => props.theme.colors.background};
    position: relative;
`;

const GraphComponent: React.FC<GraphProps> = ({
    nodesData,
    edgesData,
    options,
    onNodeClick,
    onStabilizationDone,
    setNetworkInstance,
}) => {
    const graphRef = useRef<HTMLDivElement>(null);
    const networkRef = useRef<any | null>(null);
    const resizeTimeoutRef = useRef<NodeJS.Timeout | null>(null);

    useEffect(() => {
        // console.log("GraphComponent useEffect: Running. nodesData available:", !!nodesData, "edgesData available:", !!edgesData, "nodesData length:", nodesData?.length);
        if (
            typeof window.vis === 'undefined' ||
            !window.vis.Network ||
            !window.vis.DataSet
        ) {
            // console.log("GraphComponent useEffect: vis-network not loaded yet, or not fully.");
            return;
        }

        if (
            graphRef.current &&
            nodesData &&
            edgesData &&
            nodesData.length > 0
        ) {
            // console.log("GraphComponent useEffect: All conditions met, initializing network.");
            if (networkRef.current) {
                // console.log("GraphComponent useEffect: Destroying previous network instance.");
                networkRef.current.destroy();
            }

            try {
                const currentOptions = {
                    // Merge with defaults that might ensure proper sizing
                    ...options,
                    autoResize: true,
                    width: '100%',
                    height: '100%',
                };

                const network = new window.vis.Network(
                    graphRef.current,
                    { nodes: nodesData, edges: edgesData },
                    currentOptions // Use the potentially modified options
                );
                networkRef.current = network;
                // console.log("GraphComponent useEffect: Network initialized successfully.");

                const handleResize = () => {
                    if (resizeTimeoutRef.current) {
                        clearTimeout(resizeTimeoutRef.current);
                    }
                    resizeTimeoutRef.current = setTimeout(() => {
                        if (networkRef.current) {
                            // console.log("GraphComponent: Resizing network (fit)");
                            networkRef.current.fit();
                        }
                    }, 150);
                };

                network.on('click', (params: any) => {
                    if (params.nodes.length > 0) {
                        onNodeClick(params.nodes[0] as string);
                    } else {
                        onNodeClick(null);
                    }
                });

                network.on('stabilizationIterationsDone', () => {
                    // console.log("GraphComponent: stabilizationIterationsDone event - calling fit()");
                    network.fit();
                    onStabilizationDone();
                });

                setTimeout(() => {
                    if (networkRef.current) {
                        // console.log("GraphComponent: Initial fit after short delay");
                        networkRef.current.fit();
                    }
                }, 50);

                window.addEventListener('resize', handleResize);
                setNetworkInstance(network);

                return () => {
                    // console.log("GraphComponent cleanup: Destroying network instance and removing resize listener.");
                    window.removeEventListener('resize', handleResize);
                    if (resizeTimeoutRef.current) {
                        clearTimeout(resizeTimeoutRef.current);
                    }
                    if (networkRef.current) {
                        networkRef.current.destroy();
                    }
                    networkRef.current = null;
                    setNetworkInstance(null);
                };
            } catch (error) {
                console.error(
                    'GraphComponent useEffect: Error initializing vis.Network:',
                    error
                );
            }
        } else {
            // console.log("GraphComponent useEffect: Conditions not met for network initialization.", {
            //     graphRefCurrent: !!graphRef.current,
            //     hasNodesData: !!nodesData,
            //     hasEdgesData: !!edgesData,
            //     nodesDataLength: nodesData?.length
            // });
            if (networkRef.current) {
                // console.log("GraphComponent useEffect: Data became empty/invalid, destroying existing network.");
                networkRef.current.destroy();
                networkRef.current = null;
                setNetworkInstance(null);
            }
        }
    }, [
        nodesData,
        edgesData,
        options, // options is a dependency
        onNodeClick,
        onStabilizationDone,
        setNetworkInstance,
    ]);

    if (!nodesData || !edgesData) {
        return <GraphContainerDiv>Graph data not ready...</GraphContainerDiv>;
    }
    if (nodesData.length === 0 && edgesData.length === 0) {
        return <GraphContainerDiv>No graph data to display.</GraphContainerDiv>;
    }

    return (
        <GraphContainerDiv>
            <LanguageGraphDiv ref={graphRef} />
        </GraphContainerDiv>
    );
};

export default GraphComponent;
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/components/Graph.tsx
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/components/Layout.tsx</path>
      <content><![CDATA[
import React from 'react';
import GlobalStyles from '@/styles/GlobalStyles';
import { ThemeProvider } from '@emotion/react';
import theme from '@/styles/theme';

interface LayoutProps {
    children: React.ReactNode;
}

const Layout: React.FC<LayoutProps> = ({ children }) => {
    return (
        <ThemeProvider theme={theme}>
            <GlobalStyles />
            {children}
        </ThemeProvider>
    );
};

export default Layout;
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/components/Layout.tsx
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/components/LoadingIndicator.tsx</path>
      <content><![CDATA[
import React from 'react';
import styled from '@emotion/styled';

const LoadingMessage = styled.div`
    position: absolute;
    top: 50%;
    left: 50%;
    transform: translate(-50%, -50%);
    font-size: 1.1em;
    color: ${(props) => props.theme.colors.labelLight};
    z-index: 10;
`;

const LoadingIndicator: React.FC = () => {
    return <LoadingMessage>Loading graph...</LoadingMessage>;
};

export default LoadingIndicator;
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/components/LoadingIndicator.tsx
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/components/Sidebar.tsx</path>
      <content><![CDATA[
import React, { useState } from 'react';
import styled from '@emotion/styled';
import {
    LanguageNode,
    InfluenceEdge,
    SyntaxData,
    LanguageRankings,
    RankLegend,
    CategoryShortToFullName as CategoryShortToFullNameType,
    VisDataSetNodes,
    VisDataSetEdges,
} from '@/types'; // Types from @/types
// Data for categoriesOrder is not directly needed here, it's passed as a prop
// import { categoriesOrder as defaultCategoriesOrderFromData } from '@/data';

interface SidebarProps {
    selectedNode: LanguageNode | null;
    nodesDataSet: VisDataSetNodes | null;
    edgesDataSet: VisDataSetEdges | null;
    syntaxData: SyntaxData;
    languageRankingsData: LanguageRankings;
    rankLegend: RankLegend;
    categoryMap: CategoryShortToFullNameType;
    categoriesOrder: string[];
    onClose: () => void;
    isVisible: boolean;
}

interface SidebarContainerStyleProps {
    isVisible: boolean;
}

const SidebarContainer = styled.div<SidebarContainerStyleProps>`
    id: details-sidebar;
    width: 420px;
    max-height: calc(100vh - 40px - 75px);
    background-color: ${(props) => props.theme.colors.sidebarBackground};
    backdrop-filter: blur(12px) saturate(180%);
    -webkit-backdrop-filter: blur(12px) saturate(180%);
    border: 0.5px solid ${(props) => props.theme.colors.sidebarBorder};
    border-radius: 14px;
    padding: 20px;
    overflow-y: auto;
    color: ${(props) => props.theme.colors.sidebarText};
    position: absolute;
    right: 20px;
    top: 80px;
    z-index: 1000;
    box-shadow: ${(props) => props.theme.shadows.sidebar};
    transition: opacity 0.25s ease-in-out, transform 0.25s ease-in-out;
    opacity: ${(props) => (props.isVisible ? 1 : 0)};
    transform: ${(props) =>
        props.isVisible
            ? 'scale(1) translateX(0)'
            : 'scale(0.97) translateX(10px)'};
    pointer-events: ${(props) => (props.isVisible ? 'auto' : 'none')};
`;

const CloseButton = styled.button`
    position: absolute;
    top: 15px;
    right: 15px;
    background: rgba(100, 100, 100, 0.3);
    border: none;
    border-radius: 50%;
    width: 28px;
    height: 28px;
    font-size: 17px;
    font-weight: normal;
    color: #e0e0e0;
    cursor: pointer;
    padding: 0;
    line-height: 28px;
    text-align: center;
    transition: background-color 0.15s ease, color 0.15s ease;

    &:hover {
        background-color: rgba(120, 120, 120, 0.5);
        color: #fff;
    }
`;

const SidebarTitle = styled.h2`
    margin-top: 0;
    margin-bottom: 12px;
    font-size: 1.4em;
    color: ${(props) => props.theme.colors.sidebarHeader};
    border-bottom: 1px solid rgba(120, 120, 120, 0.3);
    padding-bottom: 12px;
    font-weight: 600;
`;

const LanguageTagsList = styled.ul`
    list-style: none;
    padding: 0;
    margin: 0 0 18px 0;
    display: flex;
    flex-wrap: wrap;
    gap: 8px;

    li {
        padding: 6px 12px;
        border-radius: 15px; /* Pill shape */
        font-size: 0.88em;
        font-weight: 500;
        color: #fff;
        box-shadow: ${(props) => props.theme.shadows.control};
    }
`;

const SectionTitle = styled.h3`
    margin-top: 20px;
    margin-bottom: 10px;
    font-size: 1.05em;
    color: ${(props) => props.theme.colors.sidebarSubheader};
    font-weight: 600;
    text-transform: uppercase;
    letter-spacing: 0.5px;
`;

const List = styled.ul`
    list-style: none;
    padding: 0;
    margin: 0 0 18px 0;

    li {
        margin-bottom: 7px;
        color: ${(props) => props.theme.colors.sidebarListItem};
        font-size: 0.98em;
    }
`;

const PreformattedText = styled.pre`
    background-color: ${(props) => props.theme.colors.codeBackground};
    border: 1px solid ${(props) => props.theme.colors.codeBorder};
    border-radius: 8px;
    padding: 14px;
    font-family: ${(props) => props.theme.fonts.mono};
    font-size: 0.9em;
    color: ${(props) => props.theme.colors.codeText};
    white-space: pre-wrap;
    word-wrap: break-word;
    line-height: 1.45;
    max-height: 300px;
    overflow-y: auto;
`;

const CollapsibleSectionHeader = styled(SectionTitle)`
    cursor: pointer;
    display: flex;
    justify-content: space-between;
    align-items: center;
`;

interface ToggleArrowProps {
    isCollapsed: boolean;
}
const ToggleArrow = styled.span<ToggleArrowProps>`
    display: inline-block;
    transition: transform 0.3s ease;
    font-size: 0.8em;
    color: ${(props) => props.theme.colors.sidebarSubheader};
    transform: ${(props) =>
        props.isCollapsed ? 'rotate(-90deg)' : 'rotate(0deg)'};
`;

interface CollapsibleContentProps {
    isCollapsed: boolean;
}
const CollapsibleContent = styled.div<CollapsibleContentProps>`
    overflow: hidden;
    max-height: ${(props) => (props.isCollapsed ? '0' : '800px')};
    transition: max-height 0.3s ease-in-out, padding 0.3s ease-in-out,
        margin 0.3s ease-in-out;
    padding-top: ${(props) => (props.isCollapsed ? '0' : '5px')};
    padding-bottom: ${(props) => (props.isCollapsed ? '0' : '5px')};
    margin-top: ${(props) => (props.isCollapsed ? '0' : 'auto')};
    margin-bottom: ${(props) => (props.isCollapsed ? '0' : 'auto')};
`;

const Sidebar: React.FC<SidebarProps> = ({
    selectedNode,
    nodesDataSet,
    edgesDataSet,
    syntaxData,
    languageRankingsData,
    rankLegend,
    categoryMap,
    categoriesOrder,
    onClose,
    isVisible,
}) => {
    const [isRankingsCollapsed, setIsRankingsCollapsed] = useState(false);

    if (!selectedNode || !nodesDataSet || !edgesDataSet) {
        return <SidebarContainer isVisible={false} />;
    }

    const { labelOriginal, goodTagsDisplay, badTagsDisplay } = selectedNode;

    const incomingEdges = edgesDataSet.get({
        filter: (edge: InfluenceEdge) => edge.to === selectedNode.id,
    });
    const influencedBy: string[] = incomingEdges // Explicitly type influencedBy as string[]
        .map(
            (edge: InfluenceEdge) => nodesDataSet.get(edge.from)?.labelOriginal
        )
        .filter(Boolean) as string[]; // Assert that filter(Boolean) returns string[]

    const outgoingEdges = edgesDataSet.get({
        filter: (edge: InfluenceEdge) => edge.from === selectedNode.id,
    });
    const influences: string[] = outgoingEdges // Explicitly type influences as string[]
        .map((edge: InfluenceEdge) => nodesDataSet.get(edge.to)?.labelOriginal)
        .filter(Boolean) as string[]; // Assert that filter(Boolean) returns string[]

    const langRankings = languageRankingsData[labelOriginal];

    return (
        <SidebarContainer isVisible={isVisible}>
            <CloseButton onClick={onClose}>×</CloseButton>
            <SidebarTitle>{labelOriginal}</SidebarTitle>

            {(goodTagsDisplay.length > 0 || badTagsDisplay.length > 0) && (
                <LanguageTagsList>
                    {goodTagsDisplay.map((tag: string) => (
                        <li
                            key={`good-${tag}`}
                            style={{
                                backgroundColor: 'rgba(48, 209, 88, 0.25)',
                                border: '1px solid rgba(48, 209, 88, 0.5)',
                            }}
                        >
                            👍 {tag}
                        </li>
                    ))}
                    {badTagsDisplay.map((tag: string) => (
                        <li
                            key={`bad-${tag}`}
                            style={{
                                backgroundColor: 'rgba(255, 69, 58, 0.25)',
                                border: '1px solid rgba(255, 69, 58, 0.5)',
                            }}
                        >
                            👎 {tag}
                        </li>
                    ))}
                </LanguageTagsList>
            )}

            <SectionTitle>Influenced By:</SectionTitle>
            <List>
                {influencedBy.length > 0 ? (
                    influencedBy.map(
                        (
                            name: string // name is now guaranteed to be string
                        ) => <li key={name}>{name}</li>
                    )
                ) : (
                    <li>None in this graph</li>
                )}
            </List>

            <SectionTitle>Influences:</SectionTitle>
            <List>
                {influences.length > 0 ? (
                    influences.map((name: string) => <li key={name}>{name}</li>) // name is now guaranteed to be string
                ) : (
                    <li>None in this graph</li>
                )}
            </List>

            <div className="collapsible-section">
                <CollapsibleSectionHeader
                    onClick={() => setIsRankingsCollapsed(!isRankingsCollapsed)}
                >
                    Category Rankings
                    <ToggleArrow isCollapsed={isRankingsCollapsed}>
                        {isRankingsCollapsed ? '▶' : '▼'}
                    </ToggleArrow>
                </CollapsibleSectionHeader>
                <CollapsibleContent isCollapsed={isRankingsCollapsed}>
                    <List>
                        {langRankings ? (
                            categoriesOrder.map((catShort: string) => {
                                if (langRankings[catShort] === undefined)
                                    return null;
                                const score = langRankings[catShort];
                                const legendText = rankLegend[score] || 'N/A';
                                return (
                                    <li key={catShort}>
                                        {categoryMap[catShort] || catShort}:{' '}
                                        {score} ({legendText})
                                    </li>
                                );
                            })
                        ) : (
                            <li>Rankings not available.</li>
                        )}
                    </List>
                </CollapsibleContent>
            </div>

            <SectionTitle>Basic Syntax Example:</SectionTitle>
            <PreformattedText>
                {syntaxData[labelOriginal] || 'Syntax example not available.'}
            </PreformattedText>
        </SidebarContainer>
    );
};

export default Sidebar;
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/components/Sidebar.tsx
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/data/index.ts</path>
      <content><![CDATA[
export * from './languageCoreData';
export * from './syntaxData';
export * from './rankingData';
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/data/index.ts
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/data/languageCoreData.ts</path>
      <content><![CDATA[
import { LanguageNode, InfluenceEdge } from '@/types';

export const initialNodesData: Omit<
    LanguageNode,
    | 'labelOriginal'
    | 'goodAtCategories'
    | 'badAtCategories'
    | 'goodTagsDisplay'
    | 'badTagsDisplay'
>[] = [
    // Nodes from the original HTML (ensure 'label' is the primary key/name)
    { id: 'Assembly', label: 'Assembly', group: 'misc', shape: 'box' },
    { id: 'Python', label: 'Python', group: 'misc', shape: 'box' },
    {
        id: 'Algol 60',
        label: 'Algol 60',
        group: 'c_syntax_algol',
        shape: 'box',
    },
    { id: 'C', label: 'C', group: 'c_syntax_core', shape: 'box' },
    { id: 'C++', label: 'C++', group: 'c_syntax_core', shape: 'box' },
    {
        id: 'Objective-C',
        label: 'Objective-C',
        group: 'c_syntax_core',
        shape: 'box',
    },
    { id: 'Perl', label: 'Perl', group: 'c_syntax_script', shape: 'box' },
    { id: 'Awk', label: 'Awk', group: 'c_syntax_script', shape: 'box' },
    {
        id: 'JavaScript',
        label: 'JavaScript',
        group: 'c_syntax_script',
        shape: 'box',
    },
    { id: 'PHP', label: 'PHP', group: 'c_syntax_script', shape: 'box' },
    { id: 'Java', label: 'Java', group: 'c_syntax_jvm', shape: 'box' },
    { id: 'D', label: 'D', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Rust', label: 'Rust', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Go', label: 'Go', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Zig', label: 'Zig', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Odin', label: 'Odin', group: 'c_syntax_modern', shape: 'box' },
    { id: 'V', label: 'V', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Swift', label: 'Swift', group: 'c_syntax_modern', shape: 'box' },
    { id: 'C#', label: 'C#', group: 'c_syntax_jvm', shape: 'box' },
    { id: 'Kotlin', label: 'Kotlin', group: 'c_syntax_jvm', shape: 'box' },
    { id: 'Scala', label: 'Scala', group: 'c_syntax_jvm', shape: 'box' },
    { id: 'Dart', label: 'Dart', group: 'c_syntax_script', shape: 'box' },
    {
        id: 'TypeScript',
        label: 'TypeScript',
        group: 'c_syntax_script',
        shape: 'box',
    },
    { id: 'ML', label: 'ML', group: 'ml', shape: 'box' },
    { id: 'Standard ML', label: 'Standard ML', group: 'ml', shape: 'box' },
    { id: 'Haskell', label: 'Haskell', group: 'ml', shape: 'box' },
    { id: 'OCaml', label: 'OCaml', group: 'ml', shape: 'box' },
    { id: 'F#', label: 'F#', group: 'ml', shape: 'box' },
    { id: 'Nim', label: 'Nim', group: 'ml', shape: 'box' },
    { id: 'Julia', label: 'Julia', group: 'stats', shape: 'box' },
    { id: 'Pascal', label: 'Pascal', group: 'pascal_like', shape: 'box' },
    { id: 'Modula-2', label: 'Modula-2', group: 'pascal_like', shape: 'box' },
    { id: 'ABC', label: 'ABC', group: 'pascal_like', shape: 'box' },
    { id: 'Ada', label: 'Ada', group: 'pascal_like', shape: 'box' },
    { id: 'Oberon', label: 'Oberon', group: 'pascal_like', shape: 'box' },
    { id: 'Lisp', label: 'Lisp', group: 'lisp', shape: 'box' },
    { id: 'Scheme', label: 'Scheme', group: 'lisp', shape: 'box' },
    { id: 'Common Lisp', label: 'Common Lisp', group: 'lisp', shape: 'box' },
    { id: 'Clojure', label: 'Clojure', group: 'lisp', shape: 'box' },
    { id: 'Racket', label: 'Racket', group: 'lisp', shape: 'box' },
    { id: 'Lua', label: 'Lua', group: 'c_syntax_script', shape: 'box' },
    { id: 'Simula', label: 'Simula', group: 'smalltalk', shape: 'box' },
    { id: 'Smalltalk', label: 'Smalltalk', group: 'smalltalk', shape: 'box' },
    { id: 'Ruby', label: 'Ruby', group: 'smalltalk', shape: 'box' },
    { id: 'Elixir', label: 'Elixir', group: 'logic', shape: 'box' },
    { id: 'Prolog', label: 'Prolog', group: 'logic', shape: 'box' },
    { id: 'Erlang', label: 'Erlang', group: 'logic', shape: 'box' },
    { id: 'Fortran', label: 'Fortran', group: 'stats', shape: 'box' },
    { id: 'SQL', label: 'SQL', group: 'misc', shape: 'box' },
    { id: 'S', label: 'S', group: 'stats', shape: 'box' },
    { id: 'MATLAB', label: 'MATLAB', group: 'stats', shape: 'box' },
    { id: 'SAS', label: 'SAS', group: 'stats', shape: 'box' },
    { id: 'Stata', label: 'Stata', group: 'stats', shape: 'box' },
    { id: 'R', label: 'R', group: 'stats', shape: 'box' },
    { id: 'APL', label: 'APL', group: 'array', shape: 'box' },
    { id: 'J', label: 'J', group: 'array', shape: 'box' },
    { id: 'Thompson sh', label: 'Thompson sh', group: 'shell', shape: 'box' },
    { id: 'Bourne sh', label: 'Bourne sh', group: 'shell', shape: 'box' },
    { id: 'Bash', label: 'Bash', group: 'shell', shape: 'box' },
    { id: 'Zsh', label: 'Zsh', group: 'shell', shape: 'box' },
    { id: 'PowerShell', label: 'PowerShell', group: 'shell', shape: 'box' },
    { id: 'CPL', label: 'CPL', group: 'intermediate', shape: 'box' },
    { id: 'BCPL', label: 'BCPL', group: 'intermediate', shape: 'box' },
    { id: 'B', label: 'B', group: 'intermediate', shape: 'box' },
    { id: 'Crystal', label: 'Crystal', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Vale', label: 'Vale', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Carbon', label: 'Carbon', group: 'c_syntax_modern', shape: 'box' },
    { id: 'Mojo', label: 'Mojo', group: 'c_syntax_modern', shape: 'box' },
    { id: 'COBOL', label: 'COBOL', group: 'pascal_like', shape: 'box' },
    { id: 'Svelte', label: 'Svelte', group: 'c_syntax_script', shape: 'box' },
];

export const edgeData: InfluenceEdge[] = [
    // Edges from the original HTML
    { from: 'Assembly', to: 'Fortran', arrows: 'to' },
    { from: 'Assembly', to: 'COBOL', arrows: 'to' },
    { from: 'Assembly', to: 'Algol 60', arrows: 'to' },
    { from: 'Assembly', to: 'Lisp', arrows: 'to' },
    { from: 'Assembly', to: 'APL', arrows: 'to' },
    { from: 'Assembly', to: 'B', arrows: 'to' },
    { from: 'Algol 60', to: 'CPL', arrows: 'to' },
    { from: 'Algol 60', to: 'Pascal', arrows: 'to' },
    { from: 'Algol 60', to: 'Simula', arrows: 'to' },
    { from: 'Algol 60', to: 'Ada', arrows: 'to' },
    { from: 'CPL', to: 'BCPL', arrows: 'to' },
    { from: 'BCPL', to: 'B', arrows: 'to' },
    { from: 'B', to: 'C', arrows: 'to' },
    { from: 'C', to: 'C++', arrows: 'to' },
    { from: 'C', to: 'Objective-C', arrows: 'to' },
    { from: 'C', to: 'Perl', arrows: 'to' },
    { from: 'C', to: 'Awk', arrows: 'to' },
    { from: 'C', to: 'Python', arrows: 'to' },
    { from: 'C', to: 'JavaScript', arrows: 'to' },
    { from: 'C', to: 'PHP', arrows: 'to' },
    { from: 'C', to: 'Go', arrows: 'to' },
    { from: 'C', to: 'D', arrows: 'to' },
    { from: 'C', to: 'Rust', arrows: 'to' },
    { from: 'C', to: 'Java', arrows: 'to' },
    { from: 'C++', to: 'Java', arrows: 'to' },
    { from: 'C++', to: 'C#', arrows: 'to' },
    { from: 'C++', to: 'D', arrows: 'to' },
    { from: 'C++', to: 'Rust', arrows: 'to' },
    { from: 'C++', to: 'Go', arrows: 'to' },
    { from: 'C++', to: 'Zig', arrows: 'to' },
    { from: 'C++', to: 'Odin', arrows: 'to' },
    { from: 'C++', to: 'V', arrows: 'to' },
    { from: 'C++', to: 'Swift', arrows: 'to' },
    { from: 'C++', to: 'Carbon', arrows: 'to' },
    { from: 'C++', to: 'Vale', arrows: 'to' },
    { from: 'Objective-C', to: 'Swift', arrows: 'to' },
    { from: 'Java', to: 'C#', arrows: 'to' },
    { from: 'Java', to: 'Kotlin', arrows: 'to' },
    { from: 'Java', to: 'Scala', arrows: 'to' },
    { from: 'Java', to: 'Dart', arrows: 'to' },
    { from: 'C#', to: 'F#', arrows: 'to' },
    { from: 'C#', to: 'PowerShell', arrows: 'to' },
    { from: 'ML', to: 'Standard ML', arrows: 'to' },
    { from: 'ML', to: 'OCaml', arrows: 'to' },
    { from: 'ML', to: 'Haskell', arrows: 'to' },
    { from: 'ML', to: 'F#', arrows: 'to' },
    { from: 'ML', to: 'Rust', arrows: 'to' },
    { from: 'ML', to: 'Swift', arrows: 'to' },
    { from: 'Standard ML', to: 'F#', arrows: 'to' },
    { from: 'OCaml', to: 'F#', arrows: 'to' },
    { from: 'OCaml', to: 'Rust', arrows: 'to' },
    { from: 'OCaml', to: 'Swift', arrows: 'to' },
    { from: 'OCaml', to: 'Vale', arrows: 'to' },
    { from: 'Haskell', to: 'Scala', arrows: 'to' },
    { from: 'Haskell', to: 'Rust', arrows: 'to' },
    { from: 'Haskell', to: 'Nim', arrows: 'to' },
    { from: 'Haskell', to: 'Swift', arrows: 'to' },
    // { from: 'Haskell', to: 'Elm', arrows: 'to' }, // Elm not in nodes, remove or add node
    { from: 'Pascal', to: 'Modula-2', arrows: 'to' },
    { from: 'Pascal', to: 'Ada', arrows: 'to' },
    { from: 'Pascal', to: 'Oberon', arrows: 'to' },
    { from: 'Pascal', to: 'Nim', arrows: 'to' },
    { from: 'Pascal', to: 'Go', arrows: 'to' },
    { from: 'Modula-2', to: 'Oberon', arrows: 'to' },
    { from: 'Modula-2', to: 'Lua', arrows: 'to' },
    { from: 'Modula-2', to: 'Python', arrows: 'to' },
    { from: 'ABC', to: 'Python', arrows: 'to' },
    { from: 'Lisp', to: 'Scheme', arrows: 'to' },
    { from: 'Lisp', to: 'Common Lisp', arrows: 'to' },
    { from: 'Lisp', to: 'Clojure', arrows: 'to' },
    { from: 'Lisp', to: 'Racket', arrows: 'to' },
    { from: 'Lisp', to: 'Julia', arrows: 'to' },
    // { from: 'Lisp', to: 'Dylan', arrows: 'to' }, // Dylan not in nodes
    { from: 'Lisp', to: 'Ruby', arrows: 'to' },
    { from: 'Scheme', to: 'JavaScript', arrows: 'to' },
    { from: 'Scheme', to: 'Lua', arrows: 'to' },
    { from: 'Scheme', to: 'Python', arrows: 'to' },
    { from: 'Scheme', to: 'Haskell', arrows: 'to' },
    { from: 'Scheme', to: 'Racket', arrows: 'to' },
    { from: 'Common Lisp', to: 'Clojure', arrows: 'to' },
    { from: 'Common Lisp', to: 'Julia', arrows: 'to' },
    { from: 'Simula', to: 'Smalltalk', arrows: 'to' },
    { from: 'Simula', to: 'C++', arrows: 'to' },
    { from: 'Smalltalk', to: 'Objective-C', arrows: 'to' },
    { from: 'Smalltalk', to: 'Ruby', arrows: 'to' },
    { from: 'Smalltalk', to: 'Python', arrows: 'to' },
    { from: 'Smalltalk', to: 'Java', arrows: 'to' },
    // { from: 'Smalltalk', to: 'Self', arrows: 'to' }, // Self not in nodes
    { from: 'Awk', to: 'Perl', arrows: 'to' },
    { from: 'Perl', to: 'PHP', arrows: 'to' },
    { from: 'Perl', to: 'Ruby', arrows: 'to' },
    { from: 'Perl', to: 'Python', arrows: 'to' },
    { from: 'Python', to: 'Julia', arrows: 'to' },
    { from: 'Python', to: 'Nim', arrows: 'to' },
    { from: 'Python', to: 'Go', arrows: 'to' },
    { from: 'Python', to: 'Mojo', arrows: 'to' },
    { from: 'Python', to: 'Swift', arrows: 'to' },
    // { from: 'Python', to: 'Cobra', arrows: 'to' }, // Cobra not in nodes
    { from: 'JavaScript', to: 'TypeScript', arrows: 'to' },
    { from: 'JavaScript', to: 'Dart', arrows: 'to' },
    { from: 'JavaScript', to: 'Svelte', arrows: 'to' },
    // { from: 'JavaScript', to: 'CoffeeScript', arrows: 'to' }, // CoffeeScript not in nodes
    { from: 'Prolog', to: 'Erlang', arrows: 'to' },
    { from: 'Erlang', to: 'Elixir', arrows: 'to' },
    { from: 'Fortran', to: 'S', arrows: 'to' },
    { from: 'Fortran', to: 'MATLAB', arrows: 'to' },
    { from: 'Fortran', to: 'SAS', arrows: 'to' },
    { from: 'Fortran', to: 'Stata', arrows: 'to' },
    { from: 'S', to: 'R', arrows: 'to' },
    { from: 'R', to: 'Julia', arrows: 'to' },
    { from: 'APL', to: 'J', arrows: 'to' },
    // { from: 'APL', to: 'K', arrows: 'to' }, // K not in nodes
    { from: 'APL', to: 'S', arrows: 'to' },
    { from: 'Thompson sh', to: 'Bourne sh', arrows: 'to' },
    { from: 'Bourne sh', to: 'Bash', arrows: 'to' },
    // { from: 'Bourne sh', to: 'Ksh', arrows: 'to' }, // Ksh not in nodes
    { from: 'Bash', to: 'Zsh', arrows: 'to' },
    { from: 'Bash', to: 'PowerShell', arrows: 'to' },
    { from: 'Ruby', to: 'Elixir', arrows: 'to' },
    { from: 'Ruby', to: 'Crystal', arrows: 'to' },
    { from: 'Rust', to: 'Swift', arrows: 'to' },
    { from: 'Rust', to: 'Vale', arrows: 'to' },
    { from: 'Rust', to: 'Zig', arrows: 'to' },
    { from: 'Rust', to: 'Carbon', arrows: 'to' },
    { from: 'Go', to: 'Odin', arrows: 'to' },
    { from: 'Go', to: 'V', arrows: 'to' },
    { from: 'Go', to: 'Zig', arrows: 'to' },
];
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/data/languageCoreData.ts
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/data/rankingData.ts</path>
      <content><![CDATA[
import {
    RankLegend,
    LanguageRankings,
    CategoryShortToFullName as CategoryShortToFullNameType,
} from '@/types';

export const rankLegend: RankLegend = {
    5: 'Excellent',
    4: 'Strong',
    3: 'Competent',
    2: 'Limited',
    1: 'Rare',
};

export const languageRankingsData: LanguageRankings = {
    Python: {
        ML: 5,
        Perf: 2,
        Ease: 5,
        Web: 4,
        Sys: 2,
        Script: 5,
        Mob: 3,
        Emb: 1,
        Viz: 5,
        Conc: 3,
        Func: 3,
        Game: 3,
        DevOps: 4,
        UI: 3,
        Back: 5,
        Front: 2,
        Cloud: 4,
        Tool: 4,
        Teach: 5,
        AI: 5,
        Fin: 5,
        Sci: 5,
        Ent: 4,
        RT: 2,
        Sec: 3,
    },
    JavaScript: {
        ML: 3,
        Perf: 2,
        Ease: 4,
        Web: 5,
        Sys: 2,
        Script: 4,
        Mob: 3,
        Emb: 1,
        Viz: 3,
        Conc: 3,
        Func: 2,
        Game: 3,
        DevOps: 4,
        UI: 5,
        Back: 5,
        Front: 5,
        Cloud: 4,
        Tool: 4,
        Teach: 4,
        AI: 3,
        Fin: 3,
        Sci: 3,
        Ent: 4,
        RT: 2,
        Sec: 3,
    },
    'C++': {
        ML: 3,
        Perf: 5,
        Ease: 2,
        Web: 3,
        Sys: 5,
        Script: 2,
        Mob: 2,
        Emb: 5,
        Viz: 3,
        Conc: 4,
        Func: 3,
        Game: 5,
        DevOps: 3,
        UI: 3,
        Back: 4,
        Front: 3,
        Cloud: 3,
        Tool: 4,
        Teach: 2,
        AI: 3,
        Fin: 4,
        Sci: 4,
        Ent: 4,
        RT: 5,
        Sec: 3,
    },
    Java: {
        ML: 3,
        Perf: 4,
        Ease: 3,
        Web: 4,
        Sys: 4,
        Script: 3,
        Mob: 4,
        Emb: 3,
        Viz: 3,
        Conc: 4,
        Func: 3,
        Game: 4,
        DevOps: 4,
        UI: 3,
        Back: 5,
        Front: 4,
        Cloud: 4,
        Tool: 4,
        Teach: 3,
        AI: 3,
        Fin: 4,
        Sci: 4,
        Ent: 5,
        RT: 4,
        Sec: 4,
    },
    Go: {
        ML: 3,
        Perf: 4,
        Ease: 3,
        Web: 4,
        Sys: 4,
        Script: 3,
        Mob: 2,
        Emb: 3,
        Viz: 2,
        Conc: 4,
        Func: 2,
        Game: 3,
        DevOps: 5,
        UI: 2,
        Back: 5,
        Front: 3,
        Cloud: 5,
        Tool: 4,
        Teach: 3,
        AI: 3,
        Fin: 3,
        Sci: 3,
        Ent: 4,
        RT: 4,
        Sec: 4,
    },
    Rust: {
        ML: 3,
        Perf: 5,
        Ease: 2,
        Web: 3,
        Sys: 5,
        Script: 2,
        Mob: 2,
        Emb: 4,
        Viz: 2,
        Conc: 5,
        Func: 3,
        Game: 4,
        DevOps: 3,
        UI: 2,
        Back: 4,
        Front: 3,
        Cloud: 4,
        Tool: 4,
        Teach: 2,
        AI: 3,
        Fin: 3,
        Sci: 4,
        Ent: 3,
        RT: 5,
        Sec: 5,
    },
    R: {
        ML: 5,
        Perf: 1,
        Ease: 3,
        Web: 2,
        Sys: 1,
        Script: 3,
        Mob: 1,
        Emb: 1,
        Viz: 5,
        Conc: 2,
        Func: 2,
        Game: 2,
        DevOps: 2,
        UI: 2,
        Back: 2,
        Front: 1,
        Cloud: 1,
        Tool: 2,
        Teach: 5,
        AI: 4,
        Fin: 4,
        Sci: 5,
        Ent: 2,
        RT: 1,
        Sec: 2,
    },
    TypeScript: {
        ML: 3,
        Perf: 2,
        Ease: 4,
        Web: 5,
        Sys: 2,
        Script: 4,
        Mob: 3,
        Emb: 1,
        Viz: 3,
        Conc: 3,
        Func: 2,
        Game: 3,
        DevOps: 4,
        UI: 5,
        Back: 5,
        Front: 5,
        Cloud: 4,
        Tool: 4,
        Teach: 4,
        AI: 3,
        Fin: 3,
        Sci: 3,
        Ent: 4,
        RT: 2,
        Sec: 3,
    },
    'C#': {
        ML: 3,
        Perf: 4,
        Ease: 3,
        Web: 4,
        Sys: 4,
        Script: 3,
        Mob: 4,
        Emb: 3,
        Viz: 3,
        Conc: 4,
        Func: 3,
        Game: 4,
        DevOps: 4,
        UI: 4,
        Back: 5,
        Front: 4,
        Cloud: 4,
        Tool: 4,
        Teach: 3,
        AI: 3,
        Fin: 4,
        Sci: 4,
        Ent: 5,
        RT: 4,
        Sec: 4,
    },
    Kotlin: {
        ML: 3,
        Perf: 3,
        Ease: 4,
        Web: 4,
        Sys: 3,
        Script: 3,
        Mob: 5,
        Emb: 2,
        Viz: 2,
        Conc: 3,
        Func: 3,
        Game: 3,
        DevOps: 3,
        UI: 4,
        Back: 5,
        Front: 4,
        Cloud: 3,
        Tool: 3,
        Teach: 4,
        AI: 3,
        Fin: 3,
        Sci: 3,
        Ent: 4,
        RT: 3,
        Sec: 4,
    },
    Swift: {
        ML: 3,
        Perf: 3,
        Ease: 4,
        Web: 4,
        Sys: 3,
        Script: 3,
        Mob: 5,
        Emb: 2,
        Viz: 2,
        Conc: 3,
        Func: 3,
        Game: 3,
        DevOps: 3,
        UI: 5,
        Back: 4,
        Front: 4,
        Cloud: 3,
        Tool: 3,
        Teach: 4,
        AI: 3,
        Fin: 3,
        Sci: 3,
        Ent: 4,
        RT: 3,
        Sec: 4,
    },
    PHP: {
        ML: 2,
        Perf: 2,
        Ease: 3,
        Web: 5,
        Sys: 1,
        Script: 3,
        Mob: 2,
        Emb: 1,
        Viz: 2,
        Conc: 2,
        Func: 2,
        Game: 2,
        DevOps: 3,
        UI: 4,
        Back: 5,
        Front: 5,
        Cloud: 3,
        Tool: 3,
        Teach: 3,
        AI: 2,
        Fin: 2,
        Sci: 2,
        Ent: 4,
        RT: 1,
        Sec: 2,
    },
    Ruby: {
        ML: 3,
        Perf: 1,
        Ease: 4,
        Web: 4,
        Sys: 1,
        Script: 4,
        Mob: 2,
        Emb: 1,
        Viz: 3,
        Conc: 2,
        Func: 3,
        Game: 3,
        DevOps: 4,
        UI: 4,
        Back: 5,
        Front: 4,
        Cloud: 3,
        Tool: 4,
        Teach: 4,
        AI: 3,
        Fin: 3,
        Sci: 3,
        Ent: 3,
        RT: 1,
        Sec: 2,
    },
    Scala: {
        ML: 4,
        Perf: 3,
        Ease: 2,
        Web: 4,
        Sys: 4,
        Script: 2,
        Mob: 2,
        Emb: 2,
        Viz: 3,
        Conc: 4,
        Func: 4,
        Game: 3,
        DevOps: 3,
        UI: 3,
        Back: 4,
        Front: 3,
        Cloud: 3,
        Tool: 3,
        Teach: 3,
        AI: 3,
        Fin: 4,
        Sci: 4,
        Ent: 4,
        RT: 3,
        Sec: 4,
    },
    Haskell: {
        ML: 3,
        Perf: 2,
        Ease: 1,
        Web: 2,
        Sys: 2,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 2,
        Conc: 4,
        Func: 5,
        Game: 2,
        DevOps: 2,
        UI: 2,
        Back: 2,
        Front: 1,
        Cloud: 1,
        Tool: 3,
        Teach: 3,
        AI: 3,
        Fin: 3,
        Sci: 3,
        Ent: 2,
        RT: 2,
        Sec: 3,
    },
    Julia: {
        ML: 5,
        Perf: 3,
        Ease: 3,
        Web: 2,
        Sys: 2,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 4,
        Conc: 3,
        Func: 3,
        Game: 3,
        DevOps: 2,
        UI: 2,
        Back: 2,
        Front: 1,
        Cloud: 1,
        Tool: 3,
        Teach: 4,
        AI: 4,
        Fin: 4,
        Sci: 5,
        Ent: 2,
        RT: 1,
        Sec: 3,
    },
    Dart: {
        ML: 2,
        Perf: 3,
        Ease: 3,
        Web: 4,
        Sys: 2,
        Script: 3,
        Mob: 5,
        Emb: 2,
        Viz: 2,
        Conc: 3,
        Func: 2,
        Game: 3,
        DevOps: 3,
        UI: 4,
        Back: 4,
        Front: 4,
        Cloud: 3,
        Tool: 3,
        Teach: 4,
        AI: 3,
        Fin: 2,
        Sci: 2,
        Ent: 3,
        RT: 2,
        Sec: 3,
    },
    SQL: {
        ML: 3,
        Perf: 1,
        Ease: 3,
        Web: 3,
        Sys: 1,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 2,
        Conc: 1,
        Func: 1,
        Game: 1,
        DevOps: 3,
        UI: 1,
        Back: 5,
        Front: 2,
        Cloud: 2,
        Tool: 3,
        Teach: 3,
        AI: 3,
        Fin: 5,
        Sci: 4,
        Ent: 5,
        RT: 1,
        Sec: 3,
    },
    Odin: {
        ML: 1,
        Perf: 4,
        Ease: 2,
        Web: 2,
        Sys: 4,
        Script: 2,
        Mob: 1,
        Emb: 3,
        Viz: 1,
        Conc: 3,
        Func: 2,
        Game: 2,
        DevOps: 2,
        UI: 2,
        Back: 2,
        Front: 2,
        Cloud: 2,
        Tool: 3,
        Teach: 2,
        AI: 2,
        Fin: 2,
        Sci: 2,
        Ent: 2,
        RT: 4,
        Sec: 4,
    },
    Nim: {
        ML: 2,
        Perf: 4,
        Ease: 3,
        Web: 3,
        Sys: 4,
        Script: 3,
        Mob: 2,
        Emb: 3,
        Viz: 2,
        Conc: 3,
        Func: 3,
        Game: 3,
        DevOps: 3,
        UI: 2,
        Back: 3,
        Front: 3,
        Cloud: 3,
        Tool: 4,
        Teach: 3,
        AI: 2,
        Fin: 2,
        Sci: 3,
        Ent: 3,
        RT: 4,
        Sec: 4,
    },
    D: {
        ML: 3,
        Perf: 4,
        Ease: 2,
        Web: 3,
        Sys: 4,
        Script: 2,
        Mob: 2,
        Emb: 3,
        Viz: 2,
        Conc: 4,
        Func: 3,
        Game: 4,
        DevOps: 3,
        UI: 2,
        Back: 4,
        Front: 3,
        Cloud: 3,
        Tool: 4,
        Teach: 2,
        AI: 2,
        Fin: 3,
        Sci: 4,
        Ent: 3,
        RT: 4,
        Sec: 4,
    },
    Elixir: {
        ML: 3,
        Perf: 2,
        Ease: 3,
        Web: 4,
        Sys: 2,
        Script: 3,
        Mob: 2,
        Emb: 1,
        Viz: 3,
        Conc: 4,
        Func: 3,
        Game: 3,
        DevOps: 4,
        UI: 3,
        Back: 5,
        Front: 3,
        Cloud: 4,
        Tool: 3,
        Teach: 3,
        AI: 3,
        Fin: 3,
        Sci: 3,
        Ent: 4,
        RT: 2,
        Sec: 3,
    },
    OCaml: {
        ML: 3,
        Perf: 3,
        Ease: 2,
        Web: 2,
        Sys: 3,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 2,
        Conc: 3,
        Func: 4,
        Game: 2,
        DevOps: 2,
        UI: 2,
        Back: 2,
        Front: 1,
        Cloud: 1,
        Tool: 3,
        Teach: 3,
        AI: 3,
        Fin: 3,
        Sci: 3,
        Ent: 2,
        RT: 2,
        Sec: 3,
    },
    Lisp: {
        ML: 3,
        Perf: 2,
        Ease: 2,
        Web: 2,
        Sys: 2,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 2,
        Conc: 3,
        Func: 4,
        Game: 2,
        DevOps: 2,
        UI: 2,
        Back: 2,
        Front: 1,
        Cloud: 1,
        Tool: 3,
        Teach: 3,
        AI: 4,
        Fin: 3,
        Sci: 3,
        Ent: 2,
        RT: 2,
        Sec: 3,
    },
    Zig: {
        ML: 2,
        Perf: 5,
        Ease: 2,
        Web: 2,
        Sys: 5,
        Script: 2,
        Mob: 1,
        Emb: 4,
        Viz: 1,
        Conc: 4,
        Func: 2,
        Game: 3,
        DevOps: 3,
        UI: 2,
        Back: 3,
        Front: 2,
        Cloud: 4,
        Tool: 4,
        Teach: 2,
        AI: 2,
        Fin: 2,
        Sci: 2,
        Ent: 2,
        RT: 5,
        Sec: 5,
    },
    Assembly: {
        ML: 1,
        Perf: 5,
        Ease: 1,
        Web: 1,
        Sys: 5,
        Script: 1,
        Mob: 1,
        Emb: 5,
        Viz: 1,
        Conc: 5,
        Func: 1,
        Game: 3,
        DevOps: 1,
        UI: 1,
        Back: 1,
        Front: 1,
        Cloud: 1,
        Tool: 3,
        Teach: 1,
        AI: 1,
        Fin: 2,
        Sci: 2,
        Ent: 1,
        RT: 5,
        Sec: 3,
    },
    V: {
        ML: 2,
        Perf: 4,
        Ease: 2,
        Web: 3,
        Sys: 4,
        Script: 2,
        Mob: 2,
        Emb: 3,
        Viz: 1,
        Conc: 3,
        Func: 2,
        Game: 3,
        DevOps: 3,
        UI: 2,
        Back: 3,
        Front: 3,
        Cloud: 3,
        Tool: 4,
        Teach: 2,
        AI: 2,
        Fin: 2,
        Sci: 2,
        Ent: 3,
        RT: 4,
        Sec: 4,
    },
    Bash: {
        ML: 1,
        Perf: 1,
        Ease: 3,
        Web: 2,
        Sys: 1,
        Script: 5,
        Mob: 1,
        Emb: 1,
        Viz: 1,
        Conc: 1,
        Func: 1,
        Game: 1,
        DevOps: 5,
        UI: 1,
        Back: 3,
        Front: 1,
        Cloud: 3,
        Tool: 3,
        Teach: 4,
        AI: 1,
        Fin: 1,
        Sci: 1,
        Ent: 2,
        RT: 1,
        Sec: 2,
    },
    PowerShell: {
        ML: 1,
        Perf: 1,
        Ease: 3,
        Web: 2,
        Sys: 1,
        Script: 5,
        Mob: 1,
        Emb: 1,
        Viz: 1,
        Conc: 1,
        Func: 1,
        Game: 1,
        DevOps: 5,
        UI: 1,
        Back: 3,
        Front: 1,
        Cloud: 3,
        Tool: 3,
        Teach: 4,
        AI: 1,
        Fin: 1,
        Sci: 1,
        Ent: 4,
        RT: 1,
        Sec: 2,
    },
    Perl: {
        ML: 2,
        Perf: 2,
        Ease: 2,
        Web: 3,
        Sys: 1,
        Script: 4,
        Mob: 1,
        Emb: 1,
        Viz: 2,
        Conc: 2,
        Func: 2,
        Game: 2,
        DevOps: 4,
        UI: 1,
        Back: 3,
        Front: 2,
        Cloud: 3,
        Tool: 3,
        Teach: 3,
        AI: 2,
        Fin: 2,
        Sci: 2,
        Ent: 3,
        RT: 1,
        Sec: 2,
    },
    Lua: {
        ML: 2,
        Perf: 2,
        Ease: 3,
        Web: 3,
        Sys: 1,
        Script: 4,
        Mob: 2,
        Emb: 2,
        Viz: 2,
        Conc: 2,
        Func: 2,
        Game: 5,
        DevOps: 3,
        UI: 2,
        Back: 3,
        Front: 3,
        Cloud: 3,
        Tool: 3,
        Teach: 4,
        AI: 2,
        Fin: 3,
        Sci: 2,
        Ent: 2,
        RT: 2,
        Sec: 2,
    },
    MATLAB: {
        ML: 5,
        Perf: 2,
        Ease: 2,
        Web: 1,
        Sys: 1,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 5,
        Conc: 2,
        Func: 2,
        Game: 2,
        DevOps: 1,
        UI: 2,
        Back: 1,
        Front: 1,
        Cloud: 1,
        Tool: 2,
        Teach: 4,
        AI: 4,
        Fin: 4,
        Sci: 5,
        Ent: 2,
        RT: 1,
        Sec: 2,
    },
    SAS: {
        ML: 4,
        Perf: 1,
        Ease: 1,
        Web: 1,
        Sys: 1,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 3,
        Conc: 1,
        Func: 1,
        Game: 1,
        DevOps: 1,
        UI: 1,
        Back: 1,
        Front: 1,
        Cloud: 1,
        Tool: 2,
        Teach: 3,
        AI: 3,
        Fin: 5,
        Sci: 5,
        Ent: 3,
        RT: 1,
        Sec: 2,
    },
    Stata: {
        ML: 4,
        Perf: 1,
        Ease: 1,
        Web: 1,
        Sys: 1,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 3,
        Conc: 1,
        Func: 1,
        Game: 1,
        DevOps: 1,
        UI: 1,
        Back: 1,
        Front: 1,
        Cloud: 1,
        Tool: 2,
        Teach: 3,
        AI: 3,
        Fin: 5,
        Sci: 5,
        Ent: 2,
        RT: 1,
        Sec: 2,
    },
    'Objective-C': {
        ML: 2,
        Perf: 2,
        Ease: 2,
        Web: 3,
        Sys: 3,
        Script: 2,
        Mob: 5,
        Emb: 2,
        Viz: 2,
        Conc: 3,
        Func: 2,
        Game: 3,
        DevOps: 3,
        UI: 5,
        Back: 4,
        Front: 4,
        Cloud: 3,
        Tool: 3,
        Teach: 3,
        AI: 2,
        Fin: 3,
        Sci: 3,
        Ent: 4,
        RT: 3,
        Sec: 4,
    },
    'F#': {
        ML: 3,
        Perf: 3,
        Ease: 2,
        Web: 3,
        Sys: 3,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 2,
        Conc: 3,
        Func: 4,
        Game: 2,
        DevOps: 3,
        UI: 2,
        Back: 3,
        Front: 2,
        Cloud: 2,
        Tool: 3,
        Teach: 3,
        AI: 3,
        Fin: 3,
        Sci: 3,
        Ent: 3,
        RT: 2,
        Sec: 3,
    },
    Erlang: {
        ML: 2,
        Perf: 2,
        Ease: 2,
        Web: 3,
        Sys: 2,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 2,
        Conc: 5,
        Func: 3,
        Game: 2,
        DevOps: 4,
        UI: 1,
        Back: 4,
        Front: 2,
        Cloud: 4,
        Tool: 3,
        Teach: 2,
        AI: 2,
        Fin: 2,
        Sci: 2,
        Ent: 4,
        RT: 2,
        Sec: 3,
    },
    Clojure: {
        ML: 3,
        Perf: 2,
        Ease: 2,
        Web: 3,
        Sys: 2,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 2,
        Conc: 3,
        Func: 5,
        Game: 2,
        DevOps: 3,
        UI: 2,
        Back: 3,
        Front: 2,
        Cloud: 2,
        Tool: 3,
        Teach: 3,
        AI: 3,
        Fin: 3,
        Sci: 3,
        Ent: 2,
        RT: 2,
        Sec: 3,
    },
    Prolog: {
        ML: 3,
        Perf: 1,
        Ease: 1,
        Web: 1,
        Sys: 1,
        Script: 1,
        Mob: 1,
        Emb: 1,
        Viz: 1,
        Conc: 1,
        Func: 1,
        Game: 1,
        DevOps: 1,
        UI: 1,
        Back: 1,
        Front: 1,
        Cloud: 1,
        Tool: 2,
        Teach: 4,
        AI: 5,
        Fin: 2,
        Sci: 2,
        Ent: 1,
        RT: 1,
        Sec: 2,
    },
    Scheme: {
        ML: 3,
        Perf: 1,
        Ease: 2,
        Web: 1,
        Sys: 1,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 1,
        Conc: 2,
        Func: 4,
        Game: 1,
        DevOps: 1,
        UI: 1,
        Back: 1,
        Front: 1,
        Cloud: 1,
        Tool: 2,
        Teach: 4,
        AI: 4,
        Fin: 2,
        Sci: 2,
        Ent: 1,
        RT: 1,
        Sec: 2,
    },
    Racket: {
        ML: 3,
        Perf: 1,
        Ease: 2,
        Web: 1,
        Sys: 1,
        Script: 2,
        Mob: 1,
        Emb: 1,
        Viz: 1,
        Conc: 2,
        Func: 4,
        Game: 1,
        DevOps: 1,
        UI: 1,
        Back: 1,
        Front: 1,
        Cloud: 1,
        Tool: 2,
        Teach: 4,
        AI: 4,
        Fin: 2,
        Sci: 2,
        Ent: 1,
        RT: 1,
        Sec: 2,
    },
    APL: {
        ML: 2,
        Perf: 2,
        Ease: 1,
        Web: 1,
        Sys: 1,
        Script: 1,
        Mob: 1,
        Emb: 1,
        Viz: 2,
        Conc: 1,
        Func: 1,
        Game: 1,
        DevOps: 1,
        UI: 1,
        Back: 1,
        Front: 1,
        Cloud: 1,
        Tool: 2,
        Teach: 3,
        AI: 3,
        Fin: 3,
        Sci: 4,
        Ent: 1,
        RT: 1,
        Sec: 2,
    },
    J: {
        ML: 2,
        Perf: 2,
        Ease: 1,
        Web: 1,
        Sys: 1,
        Script: 1,
        Mob: 1,
        Emb: 1,
        Viz: 2,
        Conc: 1,
        Func: 1,
        Game: 1,
        DevOps: 1,
        UI: 1,
        Back: 1,
        Front: 1,
        Cloud: 1,
        Tool: 2,
        Teach: 3,
        AI: 3,
        Fin: 3,
        Sci: 4,
        Ent: 1,
        RT: 1,
        Sec: 2,
    },
    Zsh: {
        ML: 1,
        Perf: 1,
        Ease: 3,
        Web: 2,
        Sys: 1,
        Script: 5,
        Mob: 1,
        Emb: 1,
        Viz: 1,
        Conc: 1,
        Func: 1,
        Game: 1,
        DevOps: 5,
        UI: 1,
        Back: 3,
        Front: 1,
        Cloud: 3,
        Tool: 3,
        Teach: 4,
        AI: 1,
        Fin: 1,
        Sci: 1,
        Ent: 2,
        RT: 1,
        Sec: 2,
    },
    Svelte: {
        ML: 2,
        Perf: 3,
        Ease: 4,
        Web: 5,
        Sys: 1,
        Script: 3,
        Mob: 2,
        Emb: 1,
        Viz: 2,
        Conc: 2,
        Func: 2,
        Game: 2,
        DevOps: 3,
        UI: 5,
        Back: 3,
        Front: 5,
        Cloud: 3,
        Tool: 4,
        Teach: 4,
        AI: 2,
        Fin: 2,
        Sci: 2,
        Ent: 3,
        RT: 1,
        Sec: 3,
    },
    // Add other languages if needed
};

export const categoryShortToFullName: CategoryShortToFullNameType = {
    ML: 'Machine Learning',
    Perf: 'Performance',
    Ease: 'Ease of Use',
    Web: 'Web Dev',
    Sys: 'System Prog.',
    Script: 'Scripting',
    Mob: 'Mobile Dev',
    Emb: 'Embedded',
    Viz: 'Visualization',
    Conc: 'Concurrency',
    Func: 'Functional Prog.',
    Game: 'Game Dev',
    DevOps: 'DevOps',
    UI: 'UI Dev',
    Back: 'Backend Dev',
    Front: 'Frontend Dev',
    Cloud: 'Cloud Dev',
    Tool: 'Tooling',
    Teach: 'Teaching',
    AI: 'AI (General)',
    Fin: 'Finance',
    Sci: 'Scientific Computing',
    Ent: 'Enterprise Dev',
    RT: 'Real-Time Systems',
    Sec: 'Security',
};

export const categoriesOrder: string[] = [
    'ML',
    'AI',
    'Sci',
    'Fin',
    'Viz',
    'Perf',
    'Ease',
    'Web',
    'Back',
    'Front',
    'Mob',
    'Game',
    'Sys',
    'Emb',
    'Conc',
    'Func',
    'Script',
    'DevOps',
    'Cloud',
    'Tool',
    'Teach',
    'Ent',
    'RT',
    'Sec',
];
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/data/rankingData.ts
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/data/syntaxData.ts</path>
      <content><![CDATA[
import { SyntaxData } from '@/types';

export const syntaxData: SyntaxData = {
    Python: `print("Hello, World!")\n\n# Variable\nmessage = "This is Python"`,
    JavaScript: `console.log("Hello, World!");\n\n// Variable\nlet message = "This is JavaScript";`,
    Java: `public class HelloWorld {\n    public static void main(String[] args) {\n        System.out.println("Hello, World!");\n        \n        // Variable\n        String message = "This is Java";\n    }\n}`,
    'C++': `#include <iostream>\n\nint main() {\n    std::cout << "Hello, World!" << std::endl;\n    \n    // Variable\n    std::string message = "This is C++";\n    return 0;\n}`,
    C: `#include <stdio.h>\n\nint main() {\n   printf("Hello, World!\\n");\n   \n   // Variable (string is char array)\n   char message[] = "This is C";\n   return 0;\n}`,
    Ruby: `puts "Hello, World!"\n\n# Variable\nmessage = "This is Ruby"`,
    Swift: `print("Hello, World!")\n\n// Variable\nvar message = "This is Swift"`,
    Go: `package main\n\nimport "fmt"\n\nfunc main() {\n    fmt.Println("Hello, World!")\n    \n    // Variable\n    var message string = "This is Go"\n    _ = message // Use variable to avoid error\n}`,
    Rust: `fn main() {\n    println!("Hello, World!");\n    \n    // Variable\n    let message = "This is Rust";\n}`,
    PHP: `<?php\necho "Hello, World!\\n";\n\n// Variable\n$message = "This is PHP";\n?>`,
    'C#': `using System;\n\npublic class HelloWorld\n{\n    public static void Main(string[] args)\n    {\n        Console.WriteLine ("Hello, World!");\n        \n        // Variable\n        string message = "This is C#";\n    }\n}`,
    Kotlin: `fun main() {\n    println("Hello, World!")\n    \n    // Variable\n    val message = "This is Kotlin"\n}`,
    Scala: `object HelloWorld {\n    def main(args: Array[String]): Unit = {\n        println("Hello, World!")\n        \n        // Variable\n        val message = "This is Scala"\n    }\n}`,
    Haskell: `main :: IO ()\nmain = putStrLn "Hello, World!"\n\n-- Variable (Constants are common)\nmessage :: String\nmessage = "This is Haskell"`,
    Lisp: `(format t "Hello, World!~%")\n\n; Variable (using Common Lisp syntax)\n(defparameter *message* "This is Lisp")`,
    Assembly: `; Assembly varies greatly by architecture\n; Example NASM syntax for Linux x86-64 Hello World\n\nsection .data\n    msg db 'Hello, World!', 0xa ; String and newline\n    len equ $ - msg          ; Length of string\n\nsection .text\n    global _start\n\n_start:\n    ; write(1, msg, len)\n    mov rax, 1       ; system call number (sys_write)\n    mov rdi, 1       ; file descriptor 1 (stdout)\n    mov rsi, msg     ; address of string to write\n    mov rdx, len     ; number of bytes\n    syscall          ; invoke kernel\n\n    ; exit(0)\n    mov rax, 60      ; system call number (sys_exit)\n    xor rdi, rdi     ; exit code 0\n    syscall          ; invoke kernel`,
    'Algol 60': `begin\n    comment Hello World for Algol 60;\n    outstring(1, "Hello, World!");\n    newline(1);\n\n    comment Variable example;\n    string message;\n    message := "This is Algol 60";\n    outstring(1, message);\n    newline(1);\nend`,
    'Objective-C': `#import <Foundation/Foundation.h>\n\nint main(int argc, const char * argv[]) {\n    @autoreleasepool {\n        NSLog(@"Hello, World!");\n        \n        // Variable\n        NSString *message = @"This is Objective-C";\n        NSLog(@"%@", message);\n    }\n    return 0;\n}`,
    Perl: `use strict;\nuse warnings;\n\nprint "Hello, World!\\n";\n\n# Variable\nmy $message = "This is Perl";\nprint "$message\\n";`,
    Awk: `BEGIN {\n    print "Hello, World!"\n    \n    # Variable\n    message = "This is Awk"\n    print message\n}`,
    D: `import std.stdio;\n\nvoid main() {\n    writeln("Hello, World!");\n\n    // Variable\n    string message = "This is D";\n    writeln(message);\n}`,
    Zig: `const std = @import("std");\n\npub fn main() !void {\n    const stdout = std.io.getStdOut().writer();\n    try stdout.print("Hello, World!\\n", .{});\n\n    // Variable\n    const message = "This is Zig";\n    try stdout.print("{s}\\n", .{message});\n}`,
    Odin: `package main\n\nimport "core:fmt"\n\nmain :: proc() {\n    fmt.println("Hello, World!")\n\n    // Variable\n    message: string = "This is Odin"\n    fmt.println(message)\n}`,
    V: `fn main() {\n    println('Hello, World!')\n\n    // Variable\n    message := 'This is V'\n    println(message)\n}`,
    Dart: `void main() {\n  print('Hello, World!');\n\n  // Variable\n  var message = 'This is Dart';\n  print(message);\n}`,
    TypeScript: `console.log("Hello, World!");\n\n// Variable\nlet message: string = "This is TypeScript";\nconsole.log(message);`,
    ML: `(* Standard ML syntax for ML Family *)\nprint "Hello, World!\\n";\n\n(* Variable *)\nval message = "This is ML (via SML)";\nprint (message ^ "\\n");`,
    'Standard ML': `print "Hello, World!\\n";\n\n(* Variable *)\nval message = "This is Standard ML";\nprint (message ^ "\\n");`,
    OCaml: `let () = print_endline "Hello, World!"\n\n(* Variable *)\nlet message = "This is OCaml"\nlet () = print_endline message`,
    'F#': `printfn "Hello, World!"\n\n// Variable\nlet message = "This is F#"\nprintfn "%s" message`,
    Nim: `echo "Hello, World!"\n\n# Variable\nvar message: string = "This is Nim"\necho message`,
    Julia: `println("Hello, World!")\n\n# Variable\nmessage = "This is Julia"\nprintln(message)`,
    Pascal: `program HelloWorld;\nvar\n  message: string;\nbegin\n  WriteLn('Hello, World!');\n  message := 'This is Pascal';\n  WriteLn(message);\nend.`,
    'Modula-2': `MODULE HelloWorld;\nFROM InOut IMPORT WriteString, WriteLn;\nVAR\n  message: ARRAY [0..20] OF CHAR;\nBEGIN\n  WriteString("Hello, World!");\n  WriteLn;\n  message := "This is Modula-2";\n  WriteString(message);\n  WriteLn;\nEND HelloWorld.`,
    ABC: `WRITE "Hello, World!" /\n\n-- Variable\nPUT "This is ABC" IN message\nWRITE message /`,
    Ada: `with Ada.Text_IO; use Ada.Text_IO;\nprocedure Hello is\n   Message : String := "This is Ada";\nbegin\n   Put_Line ("Hello, World!");\n   Put_Line (Message);\nend Hello;`,
    Oberon: `MODULE HelloWorld;\nIMPORT Out;\nVAR\n  message: ARRAY 32 OF CHAR;\nBEGIN\n  Out.String("Hello, World!"); Out.Ln;\n  message := "This is Oberon";\n  Out.String(message); Out.Ln;\nEND HelloWorld.`,
    Scheme: `(display "Hello, World!")\n(newline)\n\n; Variable\n(define message "This is Scheme")\n(display message)\n(newline)`,
    'Common Lisp': `(format t "Hello, World!~%")\n\n; Variable\n(defvar *my-message* "This is Common Lisp")\n(format t "~a~%" *my-message*)`,
    Clojure: `(println "Hello, World!")\n\n; Variable\n(def message "This is Clojure")\n(println message)`,
    Racket: `#lang racket\n(displayln "Hello, World!")\n\n; Variable\n(define message "This is Racket")\n(displayln message)`,
    Lua: `print("Hello, World!")\n\n-- Variable\nlocal message = "This is Lua"\nprint(message)`,
    Simula: `Begin\n    OutText("Hello, World!");\n    OutImage;\n    ! Variable;\n    Text T;\n    T :- "This is Simula";\n    OutText(T);\n    OutImage;\nEnd;`,
    Smalltalk: `Transcript show: 'Hello, World!'; cr.\n\n"Variable"\n| message |\nmessage := 'This is Smalltalk'.\nTranscript show: message; cr.`,
    Elixir: `IO.puts "Hello, World!"\n\n# Variable\nmessage = "This is Elixir"\nIO.puts message`,
    Prolog: `:- initialization(main).\nmain :-\n  write('Hello, World!'), nl,\n  Message = 'This is Prolog', % Variable-like usage\n  write(Message), nl.`,
    Erlang: `-module(hello).\n-export([start/0]).\n\nstart() ->\n    io:fwrite("Hello, World!~n"),\n    Message = "This is Erlang",\n    io:fwrite(Message ++ "~n").`,
    Fortran: `program hello\n  implicit none\n  character(len=30) :: message\n  print *, "Hello, World!"\n  message = "This is Fortran"\n  print *, message\nend program hello`,
    SQL: `SELECT 'Hello, World!' AS Greeting;\n\n-- Variables are dialect-specific.\n-- Example for display:\n-- DECLARE @message VARCHAR(50) = 'This is SQL'; SELECT @message; -- (T-SQL)\n-- SET @message = 'This is SQL'; -- (MySQL user variable, conceptual)\n`,
    S: `# S language example (often run in R)\nprint("Hello, World!")\n\n# Variable\nmessage <- "This is S (via R syntax)"\nprint(message)`,
    MATLAB: `disp('Hello, World!');\n\n% Variable\nmessage = 'This is MATLAB';\ndisp(message);`,
    SAS: `DATA _NULL_;\n    PUT "Hello, World!";\n    /* Variable */\n    length message $ 20;\n    message = "This is SAS";\n    PUT message;\nRUN;`,
    Stata: `display "Hello, World!"\n\n* Variable (Stata uses macros for this kind of string)\nlocal message "This is Stata"\ndisplay "\`message'"`,
    R: `print("Hello, World!")\n\n# Variable\nmessage <- "This is R"\nprint(message)`,
    APL: `'Hello, World!'\n\n⍝ Variable\nmessage ← 'This is APL'\nmessage`,
    J: `'Hello, World!' NB. Output directly\n\nNB. Variable\nmessage =: 'This is J'\nmessage`,
    'Thompson sh': `# Thompson sh (Ken Thompson's original shell)\n# This uses Bourne-like syntax for modern representation\necho "Hello, World!"\n\n# Variables\nmessage="This is Thompson sh"\necho "$message"`,
    'Bourne sh': `echo "Hello, World!"\n\n# Variable\nmessage="This is Bourne sh"\necho "$message"`,
    Bash: `echo "Hello, World!"\n\n# Variable\nmessage="This is Bash"\necho "$message"`,
    Zsh: `echo "Hello, World!"\n\n# Variable\nmessage="This is Zsh"\necho "$message"`,
    PowerShell: `Write-Host "Hello, World!"\n\n# Variable\n$message = "This is PowerShell"\nWrite-Host $message`,
    CPL: `(* CPL (Combined Programming Language) *)\n(* Precursor to BCPL. Exact 'Hello World' hard to pin down. *)\n(* Conceptual example based on influences: *)\nWRITESTRING("Hello, World!")\nLET Message = "This is CPL"`,
    BCPL: `GET "libhdr.h"\n\nLET START () BE\n$(\n    WRITES ("Hello, World!*N")\n\n    // Variable\n    LET message = "This is BCPL"\n    WRITES (message)\n    WRITES ("*N")\n$)`,
    B: `/* B Language Example (precursor to C) */\nmain() {\n  extrn putstr; /* Assumed library function */\n  putstr("Hello, World!*n"); /* *n for newline in some B versions */\n\n  /* Variable (auto on stack) */\n  auto message[20]; \n  /* String assignment was manual, char by char, or via a function */\n  /* For example: message = "This is B" (conceptual) */\n}`,
    Crystal: `puts "Hello, World!"\n\n# Variable\nmessage = "This is Crystal"\nputs message`,
    Vale: `import printutils.*; // Or similar for print\n\nexported func main() {\n  print("Hello, World!\\n");\n  let message = "This is Vale";\n  print(message + "\\n");\n}`,
    Carbon: `// Carbon Language (Experimental)\npackage Main api;\n\nfn Main() -> i32 {\n  Print("Hello, World!");\n  var message: String = "This is Carbon";\n  Print(message);\n  return 0;\n}`,
    Mojo: `# Mojo 🔥\nfn main():\n    print("Hello, World!")\n\n    # Variable\n    var message = "This is Mojo"\n    print(message)`,
    COBOL: `       IDENTIFICATION DIVISION.\n       PROGRAM-ID. HELLOWORLD.\n       DATA DIVISION.\n       WORKING-STORAGE SECTION.\n       01 WS-MESSAGE PIC X(30) VALUE "This is COBOL".\n       PROCEDURE DIVISION.\n           DISPLAY "Hello, World!".\n           DISPLAY WS-MESSAGE.\n           STOP RUN.`,
    Svelte: `// Svelte is a compiler, this is how you might display in a .svelte file\n<script>\n  let message = "This is Svelte (via JavaScript)";\n</script>\n\n<h1>Hello, World!</h1>\n<p>{message}</p>`,
};
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/data/syntaxData.ts
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/emotion.d.ts</path>
      <content><![CDATA[
// src/emotion.d.ts
import '@emotion/react';
import { AppTheme } from './styles/theme'; // Adjust path if your theme.ts is elsewhere

declare module '@emotion/react' {
    export interface Theme extends AppTheme {}
}
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/emotion.d.ts
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/pages/index.tsx</path>
      <content><![CDATA[
import React, { useState, useEffect, useRef, useCallback } from 'react';
import Head from 'next/head';
import dynamic from 'next/dynamic';
import Script from 'next/script';
import styled from '@emotion/styled';

import type {
    Options,
    NodeOptions,
    EdgeOptions,
    Color,
    Font,
    IdType,
} from '@/types';

import Controls from '@/components/Controls';
import Sidebar from '@/components/Sidebar';
import LoadingIndicator from '@/components/LoadingIndicator';

import {
    initialNodesData as rawNodes,
    edgeData as rawEdges,
    syntaxData,
    languageRankingsData,
    rankLegend,
    categoryShortToFullName,
    categoriesOrder,
} from '@/data';

import {
    LanguageNode,
    AllNodesOriginalStyles,
    VisNodeStyle,
    VisDataSetNodes,
    VisDataSetEdges,
    CategoryShortToFullName as CategoryShortToFullNameType,
    InfluenceEdge,
} from '@/types';
import theme from '@/styles/theme';

declare const vis: any;

const GraphComponentWithNoSSR = dynamic(() => import('@/components/Graph'), {
    ssr: false,
});

const PageContainer = styled.div`
    display: flex;
    flex-direction: column;
    height: 100vh;
    width: 100vw;
    overflow: hidden;
`;

const MainContent = styled.div`
    display: flex;
    flex-direction: column;
    flex: 1;
    min-height: 0;
    position: relative;
    overflow: hidden;
`;

interface GroupOptionsExtended extends NodeOptions {
    color?:
        | NodeOptions['color']
        | {
              background?: string;
              border?: string;
              highlight?: { background?: string; border?: string };
              hover?: { background?: string; border?: string };
          };
}

interface GraphOptionsExtended extends Options {
    groups?: Record<string, GroupOptionsExtended>;
    nodes?: NodeOptions;
    edges?: EdgeOptions;
}

const graphOptionsBase: GraphOptionsExtended = {
    autoResize: true, // Explicitly true
    width: '100%', // Tell vis.js to use container width
    height: '100%', // Tell vis.js to use container height
    layout: {
        hierarchical: {
            enabled: true,
            direction: 'UD',
            sortMethod: 'directed',
            levelSeparation: 180,
            nodeSpacing: 160,
            treeSpacing: 240,
        },
    },
    nodes: {
        shape: 'box',
        font: {
            face: theme.fonts.main,
            size: 13,
            color: theme.colors.text,
        },
        borderWidth: 0.8,
        borderWidthSelected: 1.8,
        shapeProperties: { borderRadius: 8 },
        margin: { top: 12, right: 18, bottom: 12, left: 18 },
        shadow: {
            enabled: true,
            color: 'rgba(0, 0, 0, 0.3)',
            size: 7,
            x: 2,
            y: 3,
        },
    },
    edges: {
        arrows: {
            to: {
                enabled: true,
                scaleFactor: 0.6,
                type: 'arrow',
            },
        },
        smooth: {
            enabled: true,
            type: 'cubicBezier',
            forceDirection: 'vertical',
            roundness: 0.4,
        },
        color: {
            color: '#505053',
            highlight: '#8a8a8e',
            hover: '#6a6a6e',
            inherit: false,
            opacity: 0.85,
        },
        width: 0.9,
        hoverWidth: 1.3,
        selectionWidth: 1.6,
    },
    physics: { enabled: false },
    interaction: {
        dragNodes: false,
        dragView: true,
        zoomView: true,
        tooltipDelay: 200,
        navigationButtons: true,
        keyboard: true,
        selectConnectedEdges: false,
    },
    groups: {
        c_syntax_algol: {
            color: { background: 'rgba(40, 45, 55, 0.9)', border: '#4a5568' },
        },
        c_syntax_core: {
            color: { background: 'rgba(45, 50, 60, 0.9)', border: '#5a6578' },
        },
        c_syntax_jvm: {
            color: { background: 'rgba(50, 45, 65, 0.9)', border: '#6b5f8a' },
        },
        c_syntax_modern: {
            color: { background: 'rgba(40, 55, 50, 0.9)', border: '#486a5f' },
        },
        c_syntax_script: {
            color: { background: 'rgba(40, 55, 55, 0.9)', border: '#4a6b6b' },
        },
        lisp: {
            color: { background: 'rgba(60, 50, 40, 0.9)', border: '#8a705b' },
        },
        ml: {
            color: { background: 'rgba(40, 60, 50, 0.9)', border: '#4a7565' },
        },
        smalltalk: {
            color: { background: 'rgba(60, 40, 45, 0.9)', border: '#8a5b65' },
        },
        stats: {
            color: { background: 'rgba(55, 45, 60, 0.9)', border: '#7a608a' },
        },
        array: {
            color: { background: 'rgba(60, 45, 55, 0.9)', border: '#8a607a' },
        },
        shell: {
            color: { background: 'rgba(45, 50, 65, 0.9)', border: '#5a658a' },
        },
        pascal_like: {
            color: { background: 'rgba(65, 50, 40, 0.9)', border: '#9a705b' },
        },
        logic: {
            color: { background: 'rgba(55, 45, 65, 0.9)', border: '#7a609a' },
        },
        misc: {
            color: { background: 'rgba(55, 55, 55, 0.9)', border: '#777777' },
        },
        intermediate: {
            color: { background: 'rgba(65, 65, 65, 0.9)', border: '#888888' },
        },
    },
};

if (graphOptionsBase.groups) {
    Object.values(graphOptionsBase.groups).forEach(
        (group: GroupOptionsExtended) => {
            if (group.color && typeof group.color === 'object') {
                const baseColor = group.color as {
                    background?: string;
                    border?: string;
                };
                group.color.highlight = {
                    background: baseColor.border,
                    border: baseColor.border,
                };
                group.color.hover = {
                    background: baseColor.background,
                    border: baseColor.border,
                };
            }
        }
    );
}

const HomePage: React.FC = () => {
    const [isVisScriptLoaded, setIsVisScriptLoaded] = useState(false);
    const [areDataSetsInitialized, setAreDataSetsInitialized] = useState(false);

    const [selectedNodeId, setSelectedNodeId] = useState<string | null>(null);
    const [selectedHighlightCategory, setSelectedHighlightCategory] =
        useState<string>(categoriesOrder[0]);
    const [activeHighlightType, setActiveHighlightType] = useState<
        'good' | 'bad' | null
    >(null);

    const [nodesDataSet, setNodesDataSet] = useState<VisDataSetNodes | null>(
        null
    );
    const [edgesDataSet, setEdgesDataSet] = useState<VisDataSetEdges | null>(
        null
    );

    const allNodesOriginalStylesRef = useRef<AllNodesOriginalStyles>(new Map());
    const networkInstanceRef = useRef<any | null>(null);

    useEffect(() => {
        if (isVisScriptLoaded) {
            if (
                typeof window.vis === 'undefined' ||
                !window.vis.DataSet ||
                !window.vis.Network
            ) {
                console.warn(
                    'Data initialization useEffect: window.vis or its properties (DataSet/Network) are still UNDEFINED even though isVisScriptLoaded is true. Retrying initialization may be needed if script load had issues.'
                );
                return;
            }
            console.log(
                'Data initialization useEffect: vis script IS loaded and window.vis.DataSet IS available. Processing data...'
            );

            const processedNodes: LanguageNode[] = rawNodes.map((node) => {
                const originalLabel = node.label;
                const langRankings = languageRankingsData[originalLabel];
                const goodAtCategories: string[] = [];
                const badAtCategories: string[] = [];
                const goodTagsDisplay: string[] = [];
                const badTagsDisplay: string[] = [];

                if (langRankings) {
                    categoriesOrder.forEach((cat) => {
                        if (langRankings[cat] === undefined) return;
                        if (langRankings[cat] >= 4) {
                            goodAtCategories.push(cat);
                            goodTagsDisplay.push(
                                categoryShortToFullName[cat] || cat
                            );
                        }
                        if (langRankings[cat] <= 2) {
                            badAtCategories.push(cat);
                            badTagsDisplay.push(
                                categoryShortToFullName[cat] || cat
                            );
                        }
                    });
                }
                return {
                    ...node,
                    id: node.id as IdType,
                    labelOriginal: originalLabel,
                    goodAtCategories,
                    badAtCategories,
                    goodTagsDisplay,
                    badTagsDisplay,
                };
            });

            const newNodesDataSet = new window.vis.DataSet<LanguageNode, 'id'>(
                processedNodes
            );
            const newEdgesDataSet = new window.vis.DataSet<InfluenceEdge, 'id'>(
                rawEdges
            );

            setNodesDataSet(newNodesDataSet);
            setEdgesDataSet(newEdgesDataSet);
            console.log(
                'Data initialization useEffect: DataSets created and set to state'
            );

            const tempStyles = new Map<string, VisNodeStyle>();
            newNodesDataSet.forEach((node: LanguageNode) => {
                const groupSettings = graphOptionsBase.groups?.[node.group];
                let bg =
                    (graphOptionsBase.nodes?.color as Color)?.background ||
                    'rgba(55, 55, 55, 0.9)';
                let bd =
                    (graphOptionsBase.nodes?.color as Color)?.border ||
                    '#777777';
                let fontColor =
                    (graphOptionsBase.nodes?.font as Font)?.color ||
                    theme.colors.text;

                if (
                    groupSettings?.color &&
                    typeof groupSettings.color === 'object'
                ) {
                    const grpColor = groupSettings.color as {
                        background?: string;
                        border?: string;
                    };
                    bg = grpColor.background || bg;
                    bd = grpColor.border || bd;
                }
                tempStyles.set(node.id as string, {
                    color: { background: bg, border: bd },
                    font: { color: fontColor },
                    borderWidth: graphOptionsBase.nodes?.borderWidth || 0.8,
                    label: node.labelOriginal,
                });
            });
            allNodesOriginalStylesRef.current = tempStyles;
            console.log(
                'Data initialization useEffect: Original styles stored'
            );
            setAreDataSetsInitialized(true);
            console.log(
                'Data initialization useEffect: setAreDataSetsInitialized(true)'
            );
        } else {
            console.log(
                'Data initialization useEffect: isVisScriptLoaded is false. Waiting...'
            );
        }
    }, [isVisScriptLoaded]);

    const handleNodeClick = useCallback((nodeId: string | null) => {
        setSelectedNodeId(nodeId);
    }, []);

    const handleCloseSidebar = useCallback(() => {
        setSelectedNodeId(null);
    }, []);

    const handleStabilizationDone = useCallback(() => {
        console.log(
            'HomePage: stabilizationIterationsDone received by HomePage'
        );
    }, []);

    const setNetwork = useCallback((network: any | null) => {
        networkInstanceRef.current = network;
    }, []);

    const highlightNodes = useCallback(
        (category: string, type: 'good' | 'bad') => {
            if (
                !nodesDataSet ||
                !allNodesOriginalStylesRef.current ||
                !isVisScriptLoaded ||
                !areDataSetsInitialized
            )
                return;

            const updates: Partial<LanguageNode>[] = [];
            nodesDataSet.getIds().forEach((nodeIdUntyped) => {
                const nodeId = nodeIdUntyped as string;
                const node = nodesDataSet.get(nodeId as IdType) as LanguageNode;
                const originalStyle =
                    allNodesOriginalStylesRef.current.get(nodeId);

                if (!node || !originalStyle) return;

                const langRankings = languageRankingsData[node.labelOriginal];
                let isMatch = false;

                if (langRankings && langRankings[category] !== undefined) {
                    const score = langRankings[category];
                    if (type === 'good' && score >= 4) isMatch = true;
                    if (type === 'bad' && score <= 2) isMatch = true;
                }

                let newStyle: Partial<LanguageNode>;
                if (isMatch) {
                    newStyle = {
                        id: node.id,
                        color: {
                            border:
                                type === 'good'
                                    ? theme.colors.highlightGood
                                    : theme.colors.highlightBad,
                            background: (originalStyle.color as Color)
                                .background,
                        },
                        borderWidth: 2.5,
                        font: { color: (originalStyle.font as Font).color },
                    };
                } else {
                    newStyle = {
                        id: node.id,
                        color: {
                            background: theme.colors.dimmedNodeBackground,
                            border: theme.colors.dimmedNodeBorder,
                        },
                        borderWidth: originalStyle.borderWidth,
                        font: { color: theme.colors.dimmedNodeText },
                    };
                }
                updates.push(newStyle);
            });
            if (updates.length > 0) {
                nodesDataSet.update(updates);
            }
        },
        [isVisScriptLoaded, areDataSetsInitialized, nodesDataSet]
    );

    const resetNodeHighlights = useCallback(() => {
        if (
            !nodesDataSet ||
            !allNodesOriginalStylesRef.current ||
            !isVisScriptLoaded ||
            !areDataSetsInitialized
        )
            return;
        setActiveHighlightType(null);

        const updates: Partial<LanguageNode>[] = [];
        nodesDataSet.getIds().forEach((nodeIdUntyped) => {
            const nodeId = nodeIdUntyped as string;
            const originalStyle = allNodesOriginalStylesRef.current.get(nodeId);
            if (originalStyle) {
                updates.push({
                    id: nodeId as IdType,
                    color: originalStyle.color,
                    font: originalStyle.font,
                    borderWidth: originalStyle.borderWidth,
                });
            }
        });
        if (updates.length > 0) {
            nodesDataSet.update(updates);
        }
    }, [isVisScriptLoaded, areDataSetsInitialized, nodesDataSet]);

    const handleHighlightGood = () => {
        if (activeHighlightType === 'good' && selectedHighlightCategory) {
            resetNodeHighlights();
        } else {
            highlightNodes(selectedHighlightCategory, 'good');
            setActiveHighlightType('good');
        }
    };

    const handleHighlightBad = () => {
        if (activeHighlightType === 'bad' && selectedHighlightCategory) {
            resetNodeHighlights();
        } else {
            highlightNodes(selectedHighlightCategory, 'bad');
            setActiveHighlightType('bad');
        }
    };

    const selectedNodeDetails =
        selectedNodeId && nodesDataSet
            ? (nodesDataSet.get(selectedNodeId as IdType) as LanguageNode)
            : null;

    useEffect(() => {
        const handleClickOutside = (event: MouseEvent) => {
            if (selectedNodeId && networkInstanceRef.current) {
                const sidebarElement =
                    document.getElementById('details-sidebar');
                const graphElement = document.querySelector(
                    '.vis-network canvas'
                )?.parentElement;

                if (
                    sidebarElement &&
                    !sidebarElement.contains(event.target as Node) &&
                    graphElement &&
                    graphElement.contains(event.target as Node) &&
                    typeof networkInstanceRef.current.getNodeAt ===
                        'function' &&
                    !networkInstanceRef.current.getNodeAt(
                        (event as any).pointer?.canvas || {
                            x: event.clientX,
                            y: event.clientY,
                        }
                    )
                ) {
                    handleCloseSidebar();
                }
            }
        };
        if (isVisScriptLoaded) {
            document.addEventListener('click', handleClickOutside, true);
        }
        return () => {
            if (isVisScriptLoaded) {
                document.removeEventListener('click', handleClickOutside, true);
            }
        };
    }, [selectedNodeId, handleCloseSidebar, isVisScriptLoaded]);

    const showLoadingIndicator = !isVisScriptLoaded || !areDataSetsInitialized;

    return (
        <>
            <Head>
                <title>Programming Language Graph</title>
                <meta
                    name="description"
                    content="Interactive graph of programming language influences and rankings."
                />
                <meta
                    name="viewport"
                    content="width=device-width, initial-scale=1.0"
                />
            </Head>
            <Script
                src="https://unpkg.com/vis-network/standalone/umd/vis-network.min.js"
                strategy="afterInteractive"
                onLoad={() => {
                    console.log('vis-network SCRIPT onLoad: Fired.');
                    if (
                        window.vis &&
                        typeof window.vis.DataSet === 'function' &&
                        typeof window.vis.Network === 'function'
                    ) {
                        console.log(
                            'vis-network SCRIPT onLoad: window.vis.DataSet and window.vis.Network ARE functions.'
                        );
                        setIsVisScriptLoaded(true);
                    } else {
                        console.error(
                            'vis-network SCRIPT onLoad: window.vis or its properties (DataSet/Network) are NOT functions or undefined.',
                            {
                                visExists: typeof window.vis !== 'undefined',
                                visDataSetType: typeof window.vis?.DataSet,
                                visNetworkType: typeof window.vis?.Network,
                                visObject: window.vis,
                            }
                        );
                    }
                }}
                onError={(e) => {
                    console.error('Error loading vis-network script:', e);
                }}
            />
            <PageContainer>
                <Controls
                    categories={categoriesOrder}
                    categoryMap={
                        categoryShortToFullName as CategoryShortToFullNameType
                    }
                    selectedCategory={selectedHighlightCategory}
                    onCategoryChange={setSelectedHighlightCategory}
                    onHighlightGood={handleHighlightGood}
                    onHighlightBad={handleHighlightBad}
                    onResetHighlights={resetNodeHighlights}
                    activeHighlightType={activeHighlightType || undefined}
                />
                <MainContent>
                    {showLoadingIndicator && <LoadingIndicator />}
                    {isVisScriptLoaded &&
                        areDataSetsInitialized &&
                        nodesDataSet &&
                        edgesDataSet && (
                            <GraphComponentWithNoSSR
                                nodesData={nodesDataSet}
                                edgesData={edgesDataSet}
                                options={graphOptionsBase as Options}
                                onNodeClick={handleNodeClick}
                                onStabilizationDone={handleStabilizationDone}
                                setNetworkInstance={setNetwork}
                            />
                        )}
                    {isVisScriptLoaded && areDataSetsInitialized && (
                        <Sidebar
                            selectedNode={selectedNodeDetails}
                            nodesDataSet={nodesDataSet}
                            edgesDataSet={edgesDataSet}
                            syntaxData={syntaxData}
                            languageRankingsData={languageRankingsData}
                            rankLegend={rankLegend}
                            categoryMap={
                                categoryShortToFullName as CategoryShortToFullNameType
                            }
                            categoriesOrder={categoriesOrder}
                            onClose={handleCloseSidebar}
                            isVisible={!!selectedNodeId}
                        />
                    )}
                </MainContent>
            </PageContainer>
        </>
    );
};

export default HomePage;
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/pages/index.tsx
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/pages/_app.tsx</path>
      <content><![CDATA[
import type { AppProps } from 'next/app';
import Layout from '@/components/Layout';
import 'vis-network/styles/vis-network.css'; // Import vis-network CSS globally

function MyApp({ Component, pageProps }: AppProps) {
    return (
        <Layout>
            <Component {...pageProps} />
        </Layout>
    );
}

export default MyApp;
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/pages/_app.tsx
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/styles/GlobalStyles.tsx</path>
      <content><![CDATA[
import { Global, css } from '@emotion/react';
import theme from './theme'; // Adjust path if necessary

const GlobalStyles = () => (
    <Global
        styles={css`
            html,
            body {
                margin: 0;
                padding: 0;
                height: 100%;
                font-family: ${theme.fonts.main};
                overflow: hidden;
                background-color: ${theme.colors.background};
                color: ${theme.colors.text};
                display: flex;
                flex-direction: column;
            }

            body > div:first-of-type,
            body > div:first-of-type > div {
                // For Next.js wrapper
                height: 100%;
                display: flex;
                flex-direction: column;
            }

            * {
                box-sizing: border-box;
            }

            /* Vis Network Customizations */
            .vis-navigation .vis-button {
                background-color: ${theme.colors.visNavButtonBackground};
                border: 1px solid ${theme.colors.visNavButtonBorder};
                border-radius: 8px;
                box-shadow: ${theme.shadows.control};
                color: ${theme.colors.visNavButtonText};
                font-size: 18px;
                width: 32px;
                height: 32px;
                padding: 0;
                display: flex;
                align-items: center;
                justify-content: center;
                transition: background-color 0.15s ease-in-out;
            }
            .vis-navigation .vis-button:hover {
                background-color: ${theme.colors.visNavButtonHoverBackground};
            }
            .vis-navigation {
                position: absolute;
                bottom: 20px;
                left: 20px;
                z-index: 5;
            }
            .vis-zoomExtends {
                display: none !important; /* Original style was display: none */
            }

            /* For custom select arrow */
            select {
                background-image: url("data:image/svg+xml;charset=UTF-8,%3csvg xmlns='http://www.w3.org/2000/svg' viewBox='0 0 4 5'%3e%3cpath fill='${encodeURIComponent(
                    theme.colors.labelLight
                )}' d='M2 0L0 2h4zm0 5L0 3h4z'/%3e%3c/svg%3e");
                background-repeat: no-repeat;
                background-position: right 0.7em top 50%;
                background-size: 0.65em auto;
                -webkit-appearance: none;
                -moz-appearance: none;
                appearance: none;
                padding-right: 2.5em; /* Space for arrow */
            }
        `}
    />
);

export default GlobalStyles;
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/styles/GlobalStyles.tsx
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/styles/theme.ts</path>
      <content><![CDATA[
const theme = {
    colors: {
        background: '#1c1c1e', // Apple Dark Mode Background
        text: '#f5f5f7',
        controlBackground: '#363638',
        controlBorder: '#48484a',
        controlText: '#f5f5f7',
        controlHoverBackground: '#464649',
        controlHoverBorder: '#5a5a5e',
        labelLight: '#a0a0a5',
        separator: '#3a3a3c',
        controlsContainerBackground: '#2c2c2e',
        highlightGood: '#30d158', // Brighter Apple Green
        highlightGoodBorder: '#28a745',
        highlightBad: '#ff453a', // Brighter Apple Red
        highlightBadBorder: '#d9362f',
        resetButtonBackground: '#0a84ff', // Apple Blue
        resetButtonBorder: '#0060df',
        resetButtonHoverBackground: '#0073e6',
        sidebarBackground: 'rgba(44, 44, 46, 0.88)',
        sidebarBorder: 'rgba(120, 120, 120, 0.4)',
        sidebarText: '#f5f5f7',
        sidebarHeader: '#fff',
        sidebarSubheader: '#c0c0c5',
        sidebarListItem: '#d2d2d7',
        codeBackground: 'rgba(20, 20, 22, 0.75)',
        codeBorder: 'rgba(80, 80, 80, 0.5)',
        codeText: '#e0e0e0',
        dimmedNodeBackground: 'rgba(30, 30, 32, 0.7)',
        dimmedNodeBorder: 'rgba(60, 60, 62, 0.7)',
        dimmedNodeText: '#757575',
        visNavButtonBackground: '#363638',
        visNavButtonBorder: '#48484a',
        visNavButtonText: '#e0e0e0',
        visNavButtonHoverBackground: '#464649',
    },
    fonts: {
        main: "-apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, Helvetica, Arial, sans-serif, 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol'",
        mono: "'SF Mono', 'Menlo', 'Monaco', 'Consolas', monospace",
    },
    shadows: {
        control: '0 1px 1px rgba(0, 0, 0, 0.15)',
        controlsContainer: '0 1px 3px rgba(0, 0, 0, 0.2)',
        sidebar: '0 10px 30px rgba(0, 0, 0, 0.35)',
    },
};

export type AppTheme = typeof theme;

export default theme;
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/styles/theme.ts
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/types/index.ts</path>
      <content><![CDATA[
// Import types from the main 'vis-network' entry for type checking,
// but runtime objects will come from window.vis
import {
    DataSet as VisDataSetConstructor, // Alias to avoid conflict if window.vis.DataSet is typed
    Network as VisNetworkConstructor, // Alias
    IdType,
    Node,
    Edge,
    Options,
    NodeOptions,
    EdgeOptions,
    Color,
    Font,
} from 'vis-network';

export interface LanguageNode extends Node {
    id: IdType;
    label: string;
    labelOriginal: string;
    group: string;
    goodAtCategories: string[];
    badAtCategories: string[];
    goodTagsDisplay: string[];
    badTagsDisplay: string[];
}

export interface InfluenceEdge extends Edge {
    from: IdType;
    to: IdType;
}

export interface SyntaxData {
    [language: string]: string;
}

export interface RankLegend {
    [score: number]: string;
}

export interface CategoryRankings {
    [categoryShort: string]: number;
}

export interface LanguageRankings {
    [language: string]: CategoryRankings;
}

export interface CategoryShortToFullName {
    [shortName: string]: string;
}

export interface VisNodeStyle {
    color: { background: string; border: string };
    font: { color: string };
    borderWidth: number;
    label: string;
}

export type AllNodesOriginalStyles = Map<string, VisNodeStyle>;

// These types now refer to the constructor types from vis-network for type safety
// The actual instances will be created via window.vis.DataSet
export type VisDataSetNodes = InstanceType<
    typeof VisDataSetConstructor<LanguageNode, 'id'>
>;
export type VisDataSetEdges = InstanceType<
    typeof VisDataSetConstructor<InfluenceEdge, 'id'>
>;

// Extend the global Window interface
declare global {
    interface Window {
        vis: {
            DataSet: typeof VisDataSetConstructor;
            Network: typeof VisNetworkConstructor;
            // Add other vis objects if needed, e.g., util
        };
    }
}

// Re-export Options and other specific types if they are used directly elsewhere
export type { Options, NodeOptions, EdgeOptions, Color, Font, IdType };
]]></content>
    </file>
absolutePath=/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/src/types/index.ts
    <file>
      <path>/Users/kadengruizenga/Developer/Projects/Programming-Language-Graph/tsconfig.json</path>
      <content><![CDATA[
{
    "compilerOptions": {
        "target": "es5",
        "lib": ["dom", "dom.iterable", "esnext"],
        "allowJs": true,
        "skipLibCheck": true,
        "strict": true,
        "forceConsistentCasingInFileNames": true,
        "noEmit": true,
        "esModuleInterop": true,
        "module": "esnext",
        "moduleResolution": "node",
        "resolveJsonModule": true,
        "isolatedModules": true,
        "jsx": "preserve",
        "incremental": true,
        "baseUrl": ".",
        "paths": {
            "@/data": ["src/data/index.ts"],
            "@/types": ["src/types/index.ts"],
            "@/components/*": ["src/components/*"],
            "@/data/*": ["src/data/*"],
            "@/styles/*": ["src/styles/*"],
            "@/types/*": ["src/types/*"],
            "@/pages/*": ["src/pages/*"],
            "@/public/*": ["public/*"]
        },
        "plugins": [
            {
                "name": "next"
            }
        ]
    },
    "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
    "exclude": ["node_modules"]
}
]]></content>
    </file>
  </fileContents>
</concatenation>
